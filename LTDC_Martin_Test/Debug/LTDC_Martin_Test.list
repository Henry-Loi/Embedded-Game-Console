
LTDC_Martin_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004430  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f4  080045f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080045f4  080045f4  000145f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045fc  080045fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001c8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  200001d4  200001d4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e8b5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c44  00000000  00000000  0002e8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00031538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b78  00000000  00000000  00032228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002448e  00000000  00000000  00032da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011eb0  00000000  00000000  0005722e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d49fe  00000000  00000000  000690de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013dadc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003320  00000000  00000000  0013db2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080045c4 	.word	0x080045c4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080045c4 	.word	0x080045c4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af02      	add	r7, sp, #8
  /* Initialize the SDRAM */
  SDRAM_Init();
 80004f6:	f000 fdbd 	bl	8001074 <SDRAM_Init>
	BSP_LCD_SelectLayer(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f000 f83e 	bl	800057c <BSP_LCD_SelectLayer>
  /* Clear the LCD Foreground layer */
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8000500:	2100      	movs	r1, #0
 8000502:	2001      	movs	r0, #1
 8000504:	f000 f84a 	bl	800059c <BSP_LCD_SetLayerVisible>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8000508:	2000      	movs	r0, #0
 800050a:	f000 f837 	bl	800057c <BSP_LCD_SelectLayer>
  BSP_LCD_SetLayerWindow(0,0,0,LCD_WIDTH,LCD_HEIGHT);
 800050e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	2000      	movs	r0, #0
 800051e:	f000 f87b 	bl	8000618 <BSP_LCD_SetLayerWindow>


  return LCD_OK;
 8000522:	2300      	movs	r3, #0
}
 8000524:	4618      	mov	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <BSP_LCD_GetXSize+0x20>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a06      	ldr	r2, [pc, #24]	; (8000550 <BSP_LCD_GetXSize+0x24>)
 8000536:	2134      	movs	r1, #52	; 0x34
 8000538:	fb01 f303 	mul.w	r3, r1, r3
 800053c:	4413      	add	r3, r2
 800053e:	3360      	adds	r3, #96	; 0x60
 8000540:	681b      	ldr	r3, [r3, #0]
}
 8000542:	4618      	mov	r0, r3
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	20000028 	.word	0x20000028
 8000550:	200000a4 	.word	0x200000a4

08000554 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <BSP_LCD_GetYSize+0x20>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <BSP_LCD_GetYSize+0x24>)
 800055e:	2134      	movs	r1, #52	; 0x34
 8000560:	fb01 f303 	mul.w	r3, r1, r3
 8000564:	4413      	add	r3, r2
 8000566:	3364      	adds	r3, #100	; 0x64
 8000568:	681b      	ldr	r3, [r3, #0]
}
 800056a:	4618      	mov	r0, r3
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	20000028 	.word	0x20000028
 8000578:	200000a4 	.word	0x200000a4

0800057c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <BSP_LCD_SelectLayer+0x1c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000028 	.word	0x20000028

0800059c <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 80005a8:	78fb      	ldrb	r3, [r7, #3]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d112      	bne.n	80005d4 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <BSP_LCD_SetLayerVisible+0x78>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	01db      	lsls	r3, r3, #7
 80005b8:	4413      	add	r3, r2
 80005ba:	3384      	adds	r3, #132	; 0x84
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <BSP_LCD_SetLayerVisible+0x78>)
 80005c0:	6812      	ldr	r2, [r2, #0]
 80005c2:	4611      	mov	r1, r2
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	01d2      	lsls	r2, r2, #7
 80005c8:	440a      	add	r2, r1
 80005ca:	3284      	adds	r2, #132	; 0x84
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	e011      	b.n	80005f8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <BSP_LCD_SetLayerVisible+0x78>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	01db      	lsls	r3, r3, #7
 80005de:	4413      	add	r3, r2
 80005e0:	3384      	adds	r3, #132	; 0x84
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <BSP_LCD_SetLayerVisible+0x78>)
 80005e6:	6812      	ldr	r2, [r2, #0]
 80005e8:	4611      	mov	r1, r2
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	01d2      	lsls	r2, r2, #7
 80005ee:	440a      	add	r2, r1
 80005f0:	3284      	adds	r2, #132	; 0x84
 80005f2:	f023 0301 	bic.w	r3, r3, #1
 80005f6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <BSP_LCD_SetLayerVisible+0x78>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <BSP_LCD_SetLayerVisible+0x78>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f042 0201 	orr.w	r2, r2, #1
 8000606:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	200000a4 	.word	0x200000a4

08000618 <BSP_LCD_SetLayerWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height
  * @retval None
  */
void BSP_LCD_SetLayerWindow(uint16_t LayerIndex, uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4604      	mov	r4, r0
 8000620:	4608      	mov	r0, r1
 8000622:	4611      	mov	r1, r2
 8000624:	461a      	mov	r2, r3
 8000626:	4623      	mov	r3, r4
 8000628:	80fb      	strh	r3, [r7, #6]
 800062a:	4603      	mov	r3, r0
 800062c:	80bb      	strh	r3, [r7, #4]
 800062e:	460b      	mov	r3, r1
 8000630:	807b      	strh	r3, [r7, #2]
 8000632:	4613      	mov	r3, r2
 8000634:	803b      	strh	r3, [r7, #0]
  /* Reconfigure the layer size */
  HAL_LTDC_SetWindowSize(&hLtdcHandler, Width, Height, LayerIndex);
 8000636:	8839      	ldrh	r1, [r7, #0]
 8000638:	8b3a      	ldrh	r2, [r7, #24]
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <BSP_LCD_SetLayerWindow+0x40>)
 800063e:	f001 fdf7 	bl	8002230 <HAL_LTDC_SetWindowSize>

  /* Reconfigure the layer position */
  HAL_LTDC_SetWindowPosition(&hLtdcHandler, Xpos, Ypos, LayerIndex);
 8000642:	88b9      	ldrh	r1, [r7, #4]
 8000644:	887a      	ldrh	r2, [r7, #2]
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <BSP_LCD_SetLayerWindow+0x40>)
 800064a:	f001 fe37 	bl	80022bc <HAL_LTDC_SetWindowPosition>
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bd90      	pop	{r4, r7, pc}
 8000656:	bf00      	nop
 8000658:	200000a4 	.word	0x200000a4

0800065c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800065c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065e:	b085      	sub	sp, #20
 8000660:	af02      	add	r7, sp, #8
 8000662:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <BSP_LCD_Clear+0x48>)
 8000666:	681c      	ldr	r4, [r3, #0]
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <BSP_LCD_Clear+0x48>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <BSP_LCD_Clear+0x4c>)
 800066e:	2134      	movs	r1, #52	; 0x34
 8000670:	fb01 f303 	mul.w	r3, r1, r3
 8000674:	4413      	add	r3, r2
 8000676:	335c      	adds	r3, #92	; 0x5c
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	461e      	mov	r6, r3
 800067c:	f7ff ff56 	bl	800052c <BSP_LCD_GetXSize>
 8000680:	4605      	mov	r5, r0
 8000682:	f7ff ff67 	bl	8000554 <BSP_LCD_GetYSize>
 8000686:	4602      	mov	r2, r0
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	2300      	movs	r3, #0
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	4613      	mov	r3, r2
 8000692:	462a      	mov	r2, r5
 8000694:	4631      	mov	r1, r6
 8000696:	4620      	mov	r0, r4
 8000698:	f000 f808 	bl	80006ac <LL_FillBuffer>
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a4:	20000028 	.word	0x20000028
 80006a8:	200000a4 	.word	0x200000a4

080006ac <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <LL_FillBuffer+0xa4>)
 80006bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006c0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <LL_FillBuffer+0xa8>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a24      	ldr	r2, [pc, #144]	; (8000758 <LL_FillBuffer+0xac>)
 80006c8:	2134      	movs	r1, #52	; 0x34
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	4413      	add	r3, r2
 80006d0:	3348      	adds	r3, #72	; 0x48
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d111      	bne.n	80006fc <LL_FillBuffer+0x50>
  { /* RGB565 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <LL_FillBuffer+0xa4>)
 80006da:	2202      	movs	r2, #2
 80006dc:	609a      	str	r2, [r3, #8]
		ColorIndex = ((ColorIndex & LCD_COLOR_RED)<<8) | ((ColorIndex & LCD_COLOR_GREEN )<<5) | ((ColorIndex & LCD_COLOR_BLUE) << 3);
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	f403 0278 	and.w	r2, r3, #16252928	; 0xf80000
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	015b      	lsls	r3, r3, #5
 80006ea:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80006ee:	431a      	orrs	r2, r3
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4313      	orrs	r3, r2
 80006f8:	61fb      	str	r3, [r7, #28]
 80006fa:	e002      	b.n	8000702 <LL_FillBuffer+0x56>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <LL_FillBuffer+0xa4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <LL_FillBuffer+0xa4>)
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	60d3      	str	r3, [r2, #12]

  hDma2dHandler.Instance = DMA2D;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <LL_FillBuffer+0xa4>)
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <LL_FillBuffer+0xb0>)
 800070c:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK)
 800070e:	4810      	ldr	r0, [pc, #64]	; (8000750 <LL_FillBuffer+0xa4>)
 8000710:	f001 f80b 	bl	800172a <HAL_DMA2D_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d115      	bne.n	8000746 <LL_FillBuffer+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK)
 800071a:	68f9      	ldr	r1, [r7, #12]
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <LL_FillBuffer+0xa4>)
 800071e:	f001 f961 	bl	80019e4 <HAL_DMA2D_ConfigLayer>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d10e      	bne.n	8000746 <LL_FillBuffer+0x9a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	69f9      	ldr	r1, [r7, #28]
 8000732:	4807      	ldr	r0, [pc, #28]	; (8000750 <LL_FillBuffer+0xa4>)
 8000734:	f001 f842 	bl	80017bc <HAL_DMA2D_Start>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d103      	bne.n	8000746 <LL_FillBuffer+0x9a>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800073e:	210a      	movs	r1, #10
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <LL_FillBuffer+0xa4>)
 8000742:	f001 f866 	bl	8001812 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000002c 	.word	0x2000002c
 8000754:	20000028 	.word	0x20000028
 8000758:	200000a4 	.word	0x200000a4
 800075c:	4002b000 	.word	0x4002b000

08000760 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_DMA2D_Init+0x34>)
 8000766:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <MX_DMA2D_Init+0x38>)
 8000768:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_DMA2D_Init+0x34>)
 800076c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000770:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_DMA2D_Init+0x34>)
 8000774:	2202      	movs	r2, #2
 8000776:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_DMA2D_Init+0x34>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_DMA2D_Init+0x34>)
 8000780:	f000 ffd3 	bl	800172a <HAL_DMA2D_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 800078a:	f000 fc6b 	bl	8001064 <Error_Handler>
  }

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000002c 	.word	0x2000002c
 8000798:	4002b000 	.word	0x4002b000

0800079c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <HAL_DMA2D_MspInit+0x3c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d10d      	bne.n	80007ca <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_DMA2D_MspInit+0x40>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a09      	ldr	r2, [pc, #36]	; (80007dc <HAL_DMA2D_MspInit+0x40>)
 80007b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <HAL_DMA2D_MspInit+0x40>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	4002b000 	.word	0x4002b000
 80007dc:	40023800 	.word	0x40023800

080007e0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	615a      	str	r2, [r3, #20]
 80007f6:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_FMC_Init+0x98>)
 80007fa:	4a20      	ldr	r2, [pc, #128]	; (800087c <MX_FMC_Init+0x9c>)
 80007fc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_FMC_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_FMC_Init+0x98>)
 8000806:	2201      	movs	r2, #1
 8000808:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_FMC_Init+0x98>)
 800080c:	2208      	movs	r2, #8
 800080e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_FMC_Init+0x98>)
 8000812:	2210      	movs	r2, #16
 8000814:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_FMC_Init+0x98>)
 8000818:	2240      	movs	r2, #64	; 0x40
 800081a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_FMC_Init+0x98>)
 800081e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000822:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_FMC_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_FMC_Init+0x98>)
 800082c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000830:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_FMC_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_FMC_Init+0x98>)
 800083a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8000844:	2308      	movs	r3, #8
 8000846:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8000848:	2306      	movs	r3, #6
 800084a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800084c:	2306      	movs	r3, #6
 800084e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_FMC_Init+0x98>)
 8000862:	f002 fd67 	bl	8003334 <HAL_SDRAM_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800086c:	f000 fbfa 	bl	8001064 <Error_Handler>
  }

}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000006c 	.word	0x2000006c
 800087c:	a0000140 	.word	0xa0000140

08000880 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000894:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <HAL_FMC_MspInit+0x104>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d16f      	bne.n	800097c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800089c:	4b39      	ldr	r3, [pc, #228]	; (8000984 <HAL_FMC_MspInit+0x104>)
 800089e:	2201      	movs	r2, #1
 80008a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <HAL_FMC_MspInit+0x108>)
 80008a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008aa:	4a37      	ldr	r2, [pc, #220]	; (8000988 <HAL_FMC_MspInit+0x108>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6393      	str	r3, [r2, #56]	; 0x38
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <HAL_FMC_MspInit+0x108>)
 80008b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008be:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008d0:	230c      	movs	r3, #12
 80008d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	482c      	ldr	r0, [pc, #176]	; (800098c <HAL_FMC_MspInit+0x10c>)
 80008da:	f001 f9b1 	bl	8001c40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80008de:	230d      	movs	r3, #13
 80008e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ee:	230c      	movs	r3, #12
 80008f0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4826      	ldr	r0, [pc, #152]	; (8000990 <HAL_FMC_MspInit+0x110>)
 80008f8:	f001 f9a2 	bl	8001c40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80008fc:	f248 1337 	movw	r3, #33079	; 0x8137
 8000900:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000906:	2301      	movs	r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800090e:	230c      	movs	r3, #12
 8000910:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4619      	mov	r1, r3
 8000916:	481f      	ldr	r0, [pc, #124]	; (8000994 <HAL_FMC_MspInit+0x114>)
 8000918:	f001 f992 	bl	8001c40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800091c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000920:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000926:	2301      	movs	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800092e:	230c      	movs	r3, #12
 8000930:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4619      	mov	r1, r3
 8000936:	4818      	ldr	r0, [pc, #96]	; (8000998 <HAL_FMC_MspInit+0x118>)
 8000938:	f001 f982 	bl	8001c40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800093c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000940:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000946:	2301      	movs	r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800094e:	230c      	movs	r3, #12
 8000950:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4619      	mov	r1, r3
 8000956:	4811      	ldr	r0, [pc, #68]	; (800099c <HAL_FMC_MspInit+0x11c>)
 8000958:	f001 f972 	bl	8001c40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800095c:	2303      	movs	r3, #3
 800095e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800096c:	230c      	movs	r3, #12
 800096e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	4808      	ldr	r0, [pc, #32]	; (8000998 <HAL_FMC_MspInit+0x118>)
 8000976:	f001 f963 	bl	8001c40 <HAL_GPIO_Init>
 800097a:	e000      	b.n	800097e <HAL_FMC_MspInit+0xfe>
    return;
 800097c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000a0 	.word	0x200000a0
 8000988:	40023800 	.word	0x40023800
 800098c:	40021400 	.word	0x40021400
 8000990:	40020800 	.word	0x40020800
 8000994:	40021800 	.word	0x40021800
 8000998:	40021000 	.word	0x40021000
 800099c:	40020c00 	.word	0x40020c00

080009a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80009a8:	f7ff ff6a 	bl	8000880 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08e      	sub	sp, #56	; 0x38
 80009b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
 80009ce:	4b78      	ldr	r3, [pc, #480]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a77      	ldr	r2, [pc, #476]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 80009d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b75      	ldr	r3, [pc, #468]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009e2:	623b      	str	r3, [r7, #32]
 80009e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
 80009ea:	4b71      	ldr	r3, [pc, #452]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a70      	ldr	r2, [pc, #448]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 80009f0:	f043 0320 	orr.w	r3, r3, #32
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b6e      	ldr	r3, [pc, #440]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0320 	and.w	r3, r3, #32
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	4b6a      	ldr	r3, [pc, #424]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a69      	ldr	r2, [pc, #420]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b67      	ldr	r3, [pc, #412]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	4b63      	ldr	r3, [pc, #396]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a62      	ldr	r2, [pc, #392]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b5c      	ldr	r3, [pc, #368]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a5b      	ldr	r2, [pc, #364]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b59      	ldr	r3, [pc, #356]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b55      	ldr	r3, [pc, #340]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a54      	ldr	r2, [pc, #336]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b52      	ldr	r3, [pc, #328]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a4d      	ldr	r2, [pc, #308]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a7c:	f043 0310 	orr.w	r3, r3, #16
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b47      	ldr	r3, [pc, #284]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a46      	ldr	r2, [pc, #280]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b44      	ldr	r3, [pc, #272]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a3f      	ldr	r2, [pc, #252]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, RST_Pin|SDA_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000acc:	4839      	ldr	r0, [pc, #228]	; (8000bb4 <MX_GPIO_Init+0x200>)
 8000ace:	f001 fa63 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	4838      	ldr	r0, [pc, #224]	; (8000bb8 <MX_GPIO_Init+0x204>)
 8000ad8:	f001 fa5e 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2140      	movs	r1, #64	; 0x40
 8000ae0:	4836      	ldr	r0, [pc, #216]	; (8000bbc <MX_GPIO_Init+0x208>)
 8000ae2:	f001 fa59 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2120      	movs	r1, #32
 8000aea:	4833      	ldr	r0, [pc, #204]	; (8000bb8 <MX_GPIO_Init+0x204>)
 8000aec:	f001 fa54 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	482a      	ldr	r0, [pc, #168]	; (8000bb4 <MX_GPIO_Init+0x200>)
 8000b0a:	f001 f899 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4824      	ldr	r0, [pc, #144]	; (8000bb8 <MX_GPIO_Init+0x204>)
 8000b26:	f001 f88b 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SCL_Pin;
 8000b2a:	2340      	movs	r3, #64	; 0x40
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	481e      	ldr	r0, [pc, #120]	; (8000bbc <MX_GPIO_Init+0x208>)
 8000b42:	f001 f87d 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_GPIO_Init+0x20c>)
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	4818      	ldr	r0, [pc, #96]	; (8000bbc <MX_GPIO_Init+0x208>)
 8000b5a:	f001 f871 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDA_Pin;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <MX_GPIO_Init+0x200>)
 8000b76:	f001 f863 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b7a:	2320      	movs	r3, #32
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <MX_GPIO_Init+0x204>)
 8000b92:	f001 f855 	bl	8001c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2101      	movs	r1, #1
 8000b9a:	2017      	movs	r0, #23
 8000b9c:	f000 fd6d 	bl	800167a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ba0:	2017      	movs	r0, #23
 8000ba2:	f000 fd86 	bl	80016b2 <HAL_NVIC_EnableIRQ>

}
 8000ba6:	bf00      	nop
 8000ba8:	3738      	adds	r7, #56	; 0x38
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40022000 	.word	0x40022000
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40021c00 	.word	0x40021c00
 8000bc0:	10210000 	.word	0x10210000

08000bc4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09a      	sub	sp, #104	; 0x68
 8000bc8:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bce:	2234      	movs	r2, #52	; 0x34
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 fcee 	bl	80045b4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2234      	movs	r2, #52	; 0x34
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fce8 	bl	80045b4 <memset>

  hltdc.Instance = LTDC;
 8000be4:	4b53      	ldr	r3, [pc, #332]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000be6:	4a54      	ldr	r2, [pc, #336]	; (8000d38 <MX_LTDC_Init+0x174>)
 8000be8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bea:	4b52      	ldr	r3, [pc, #328]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bf0:	4b50      	ldr	r3, [pc, #320]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bf6:	4b4f      	ldr	r3, [pc, #316]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bfc:	4b4d      	ldr	r3, [pc, #308]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 47;
 8000c02:	4b4c      	ldr	r3, [pc, #304]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000c04:	222f      	movs	r2, #47	; 0x2f
 8000c06:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 2;
 8000c08:	4b4a      	ldr	r3, [pc, #296]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 135;
 8000c0e:	4b49      	ldr	r3, [pc, #292]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000c10:	2287      	movs	r2, #135	; 0x87
 8000c12:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 34;
 8000c14:	4b47      	ldr	r3, [pc, #284]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000c16:	2222      	movs	r2, #34	; 0x22
 8000c18:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 935;
 8000c1a:	4b46      	ldr	r3, [pc, #280]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000c1c:	f240 32a7 	movw	r2, #935	; 0x3a7
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 514;
 8000c22:	4b44      	ldr	r3, [pc, #272]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000c24:	f240 2202 	movw	r2, #514	; 0x202
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 975;
 8000c2a:	4b42      	ldr	r3, [pc, #264]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000c2c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 527;
 8000c32:	4b40      	ldr	r3, [pc, #256]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000c34:	f240 220f 	movw	r2, #527	; 0x20f
 8000c38:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c3a:	4b3e      	ldr	r3, [pc, #248]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c42:	4b3c      	ldr	r3, [pc, #240]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c4a:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c52:	4838      	ldr	r0, [pc, #224]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000c54:	f001 f9de 	bl	8002014 <HAL_LTDC_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000c5e:	f000 fa01 	bl	8001064 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 1024;
 8000c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 600;
 8000c70:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000c74:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c76:	2302      	movs	r3, #2
 8000c78:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000c7a:	23ff      	movs	r3, #255	; 0xff
 8000c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c86:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c88:	2305      	movs	r3, #5
 8000c8a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c8c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000c90:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 1024;
 8000c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c96:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 600;
 8000c98:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000c9c:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481e      	ldr	r0, [pc, #120]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000cba:	f001 fa7b 	bl	80021b4 <HAL_LTDC_ConfigLayer>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000cc4:	f000 f9ce 	bl	8001064 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 1024;
 8000ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 600;
 8000cd6:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000cda:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cec:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cee:	2305      	movs	r3, #5
 8000cf0:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0xC0200000;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_LTDC_Init+0x178>)
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 1024;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 600;
 8000cfc:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	2201      	movs	r2, #1
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_LTDC_Init+0x170>)
 8000d1c:	f001 fa4a 	bl	80021b4 <HAL_LTDC_ConfigLayer>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_LTDC_Init+0x166>
  {
    Error_Handler();
 8000d26:	f000 f99d 	bl	8001064 <Error_Handler>
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3768      	adds	r7, #104	; 0x68
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200000a4 	.word	0x200000a4
 8000d38:	40016800 	.word	0x40016800
 8000d3c:	c0200000 	.word	0xc0200000

08000d40 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a48      	ldr	r2, [pc, #288]	; (8000e80 <HAL_LTDC_MspInit+0x140>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	f040 808a 	bne.w	8000e78 <HAL_LTDC_MspInit+0x138>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	4b46      	ldr	r3, [pc, #280]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	4a45      	ldr	r2, [pc, #276]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d72:	6453      	str	r3, [r2, #68]	; 0x44
 8000d74:	4b43      	ldr	r3, [pc, #268]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a3e      	ldr	r2, [pc, #248]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d90:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a37      	ldr	r2, [pc, #220]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000da6:	f043 0320 	orr.w	r3, r3, #32
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0320 	and.w	r3, r3, #32
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a29      	ldr	r2, [pc, #164]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
 8000de4:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <HAL_LTDC_MspInit+0x144>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8000df0:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8000df4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e02:	230e      	movs	r3, #14
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481e      	ldr	r0, [pc, #120]	; (8000e88 <HAL_LTDC_MspInit+0x148>)
 8000e0e:	f000 ff17 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e24:	230e      	movs	r3, #14
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4817      	ldr	r0, [pc, #92]	; (8000e8c <HAL_LTDC_MspInit+0x14c>)
 8000e30:	f000 ff06 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000e34:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000e38:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e46:	230e      	movs	r3, #14
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <HAL_LTDC_MspInit+0x150>)
 8000e52:	f000 fef5 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000e56:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e68:	230e      	movs	r3, #14
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <HAL_LTDC_MspInit+0x154>)
 8000e74:	f000 fee4 	bl	8001c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40016800 	.word	0x40016800
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40022000 	.word	0x40022000
 8000e8c:	40021400 	.word	0x40021400
 8000e90:	40021c00 	.word	0x40021c00
 8000e94:	40021800 	.word	0x40021800

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f000 fa7b 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f855 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f7ff fd85 	bl	80009b4 <MX_GPIO_Init>
  MX_LTDC_Init();
 8000eaa:	f7ff fe8b 	bl	8000bc4 <MX_LTDC_Init>
  MX_FMC_Init();
 8000eae:	f7ff fc97 	bl	80007e0 <MX_FMC_Init>
  MX_USART1_UART_Init();
 8000eb2:	f000 f9cd 	bl	8001250 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8000eb6:	f7ff fc53 	bl	8000760 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000eba:	f7ff fb19 	bl	80004f0 <BSP_LCD_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	4822      	ldr	r0, [pc, #136]	; (8000f4c <main+0xb4>)
 8000ec4:	f001 f868 	bl	8001f98 <HAL_GPIO_WritePin>
  for(int i = 0; i < 10; i++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	e012      	b.n	8000ef4 <main+0x5c>
  {
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	481e      	ldr	r0, [pc, #120]	; (8000f4c <main+0xb4>)
 8000ed4:	f001 f860 	bl	8001f98 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000ed8:	2064      	movs	r0, #100	; 0x64
 8000eda:	f000 facf 	bl	800147c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	481a      	ldr	r0, [pc, #104]	; (8000f4c <main+0xb4>)
 8000ee4:	f001 f858 	bl	8001f98 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000ee8:	2064      	movs	r0, #100	; 0x64
 8000eea:	f000 fac7 	bl	800147c <HAL_Delay>
  for(int i = 0; i < 10; i++)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b09      	cmp	r3, #9
 8000ef8:	dde9      	ble.n	8000ece <main+0x36>
//  __HAL_RCC_DMA2D_CLK_ENABLE();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000efa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000efe:	f7ff fbad 	bl	800065c <BSP_LCD_Clear>

  volatile uint32_t last_ticks = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  uint8_t LED = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	72fb      	strb	r3, [r7, #11]
  while (1)
  {
	  if (HAL_GetTick() - last_ticks >= 50){
 8000f0a:	f000 faab 	bl	8001464 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b31      	cmp	r3, #49	; 0x31
 8000f16:	d9f8      	bls.n	8000f0a <main+0x72>
		  if(LED)
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <main+0x92>
		  {
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2102      	movs	r1, #2
 8000f22:	480a      	ldr	r0, [pc, #40]	; (8000f4c <main+0xb4>)
 8000f24:	f001 f838 	bl	8001f98 <HAL_GPIO_WritePin>
 8000f28:	e004      	b.n	8000f34 <main+0x9c>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <main+0xb4>)
 8000f30:	f001 f832 	bl	8001f98 <HAL_GPIO_WritePin>
		  }
		  LED = (++LED)%2;
 8000f34:	7afb      	ldrb	r3, [r7, #11]
 8000f36:	3301      	adds	r3, #1
 8000f38:	72fb      	strb	r3, [r7, #11]
 8000f3a:	7afb      	ldrb	r3, [r7, #11]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	72fb      	strb	r3, [r7, #11]
		  last_ticks = HAL_GetTick();
 8000f42:	f000 fa8f 	bl	8001464 <HAL_GetTick>
 8000f46:	4603      	mov	r3, r0
 8000f48:	607b      	str	r3, [r7, #4]
	  if (HAL_GetTick() - last_ticks >= 50){
 8000f4a:	e7de      	b.n	8000f0a <main+0x72>
 8000f4c:	40020400 	.word	0x40020400

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b0a0      	sub	sp, #128	; 0x80
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f5a:	2230      	movs	r2, #48	; 0x30
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 fb28 	bl	80045b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2230      	movs	r2, #48	; 0x30
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 fb19 	bl	80045b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	4b35      	ldr	r3, [pc, #212]	; (800105c <SystemClock_Config+0x10c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a34      	ldr	r2, [pc, #208]	; (800105c <SystemClock_Config+0x10c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <SystemClock_Config+0x10c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <SystemClock_Config+0x110>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a2e      	ldr	r2, [pc, #184]	; (8001060 <SystemClock_Config+0x110>)
 8000fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <SystemClock_Config+0x110>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fce:	2319      	movs	r3, #25
 8000fd0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000fd2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000fd6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fb97 	bl	8002718 <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ff0:	f000 f838 	bl	8001064 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ff4:	f001 fb40 	bl	8002678 <HAL_PWREx_EnableOverDrive>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ffe:	f000 f831 	bl	8001064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	230f      	movs	r3, #15
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001006:	2302      	movs	r3, #2
 8001008:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800100e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001012:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001018:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800101a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800101e:	2105      	movs	r1, #5
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fde7 	bl	8002bf4 <HAL_RCC_ClockConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800102c:	f000 f81a 	bl	8001064 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001030:	2308      	movs	r3, #8
 8001032:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 152;
 8001034:	2398      	movs	r3, #152	; 0x98
 8001036:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001038:	2302      	movs	r3, #2
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	4618      	mov	r0, r3
 8001046:	f001 ffb5 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001050:	f000 f808 	bl	8001064 <Error_Handler>
  }
}
 8001054:	bf00      	nop
 8001056:	3780      	adds	r7, #128	; 0x80
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SDRAM_Init>:

/******************************************************************************
function:	SDRAM device configuration
******************************************************************************/
void SDRAM_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <SDRAM_Init+0x18>)
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <SDRAM_Init+0x1c>)
 800107c:	601a      	str	r2, [r3, #0]
	SDRAM_Initialization_sequence(REFRESH_COUNT);
 800107e:	f240 6003 	movw	r0, #1539	; 0x603
 8001082:	f000 f807 	bl	8001094 <SDRAM_Initialization_sequence>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000014c 	.word	0x2000014c
 8001090:	a0000140 	.word	0xa0000140

08001094 <SDRAM_Initialization_sequence>:
function:	Programs the SDRAM device.
parameter:
	RefreshCount : SDRAM refresh counter value
******************************************************************************/
void SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010a8:	2210      	movs	r2, #16
 80010aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80010b2:	4b26      	ldr	r3, [pc, #152]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80010b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010bc:	4923      	ldr	r1, [pc, #140]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010be:	4824      	ldr	r0, [pc, #144]	; (8001150 <SDRAM_Initialization_sequence+0xbc>)
 80010c0:	f002 f96c 	bl	800339c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f000 f9d9 	bl	800147c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010d2:	2210      	movs	r2, #16
 80010d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010d8:	2201      	movs	r2, #1
 80010da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80010e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e6:	4919      	ldr	r1, [pc, #100]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010e8:	4819      	ldr	r0, [pc, #100]	; (8001150 <SDRAM_Initialization_sequence+0xbc>)
 80010ea:	f002 f957 	bl	800339c <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010f0:	2203      	movs	r2, #3
 80010f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010f6:	2210      	movs	r2, #16
 80010f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 80010fc:	2208      	movs	r2, #8
 80010fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110a:	4910      	ldr	r1, [pc, #64]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 800110c:	4810      	ldr	r0, [pc, #64]	; (8001150 <SDRAM_Initialization_sequence+0xbc>)
 800110e:	f002 f945 	bl	800339c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001112:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001116:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 800111a:	2204      	movs	r2, #4
 800111c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 8001120:	2210      	movs	r2, #16
 8001122:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 8001126:	2201      	movs	r2, #1
 8001128:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 800112e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001134:	4905      	ldr	r1, [pc, #20]	; (800114c <SDRAM_Initialization_sequence+0xb8>)
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <SDRAM_Initialization_sequence+0xbc>)
 8001138:	f002 f930 	bl	800339c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	4804      	ldr	r0, [pc, #16]	; (8001150 <SDRAM_Initialization_sequence+0xbc>)
 8001140:	f002 f957 	bl	80033f2 <HAL_SDRAM_ProgramRefreshRate>
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000180 	.word	0x20000180
 8001150:	2000014c 	.word	0x2000014c

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_MspInit+0x4c>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_MspInit+0x4c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001192:	2005      	movs	r0, #5
 8001194:	f000 fa66 	bl	8001664 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f000 f920 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001204:	2080      	movs	r0, #128	; 0x80
 8001206:	f000 fee1 	bl	8001fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <USART1_IRQHandler+0x10>)
 8001216:	f002 f959 	bl	80034cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000190 	.word	0x20000190

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <SystemInit+0x28>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a07      	ldr	r2, [pc, #28]	; (800124c <SystemInit+0x28>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <SystemInit+0x28>)
 800123a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800123e:	609a      	str	r2, [r3, #8]
#endif
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <MX_USART1_UART_Init+0x50>)
 8001258:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_USART1_UART_Init+0x4c>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART1_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART1_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001288:	f002 f8d3 	bl	8003432 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001292:	f7ff fee7 	bl	8001064 <Error_Handler>
  }

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000190 	.word	0x20000190
 80012a0:	40011000 	.word	0x40011000

080012a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_UART_MspInit+0x94>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d134      	bne.n	8001330 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_UART_MspInit+0x98>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_UART_MspInit+0x98>)
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_UART_MspInit+0x98>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_UART_MspInit+0x98>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_UART_MspInit+0x98>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_UART_MspInit+0x98>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001308:	2301      	movs	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001310:	2307      	movs	r3, #7
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4809      	ldr	r0, [pc, #36]	; (8001340 <HAL_UART_MspInit+0x9c>)
 800131c:	f000 fc90 	bl	8001c40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8001320:	2201      	movs	r2, #1
 8001322:	2101      	movs	r1, #1
 8001324:	2025      	movs	r0, #37	; 0x25
 8001326:	f000 f9a8 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800132a:	2025      	movs	r0, #37	; 0x25
 800132c:	f000 f9c1 	bl	80016b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40011000 	.word	0x40011000
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800137c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001348:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800134a:	e003      	b.n	8001354 <LoopCopyDataInit>

0800134c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800134e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001350:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001352:	3104      	adds	r1, #4

08001354 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001358:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800135a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800135c:	d3f6      	bcc.n	800134c <CopyDataInit>
  ldr  r2, =_sbss
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001360:	e002      	b.n	8001368 <LoopFillZerobss>

08001362 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001362:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001364:	f842 3b04 	str.w	r3, [r2], #4

08001368 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800136a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800136c:	d3f9      	bcc.n	8001362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800136e:	f7ff ff59 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001372:	f003 f8fb 	bl	800456c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff fd8f 	bl	8000e98 <main>
  bx  lr    
 800137a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800137c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001380:	08004604 	.word	0x08004604
  ldr  r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001388:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800138c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001390:	200001d4 	.word	0x200001d4

08001394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <HAL_Init+0x40>)
 80013a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_Init+0x40>)
 80013ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_Init+0x40>)
 80013ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f000 f94f 	bl	8001664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f000 f808 	bl	80013dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013cc:	f7ff fec2 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023c00 	.word	0x40023c00

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x54>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x58>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f967 	bl	80016ce <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e00e      	b.n	8001428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d80a      	bhi.n	8001426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f000 f92f 	bl	800167a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_InitTick+0x5c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000000 	.word	0x20000000
 8001434:	20000008 	.word	0x20000008
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x20>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x24>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_IncTick+0x24>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008
 8001460:	200001d0 	.word	0x200001d0

08001464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_GetTick+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	200001d0 	.word	0x200001d0

0800147c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001484:	f7ff ffee 	bl	8001464 <HAL_GetTick>
 8001488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d005      	beq.n	80014a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_Delay+0x44>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014a2:	bf00      	nop
 80014a4:	f7ff ffde 	bl	8001464 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8f7      	bhi.n	80014a4 <HAL_Delay+0x28>
  {
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <__NVIC_EnableIRQ+0x38>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	; (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001630:	d301      	bcc.n	8001636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001632:	2301      	movs	r3, #1
 8001634:	e00f      	b.n	8001656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <SysTick_Config+0x40>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163e:	210f      	movs	r1, #15
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f7ff ff8e 	bl	8001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <SysTick_Config+0x40>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <SysTick_Config+0x40>)
 8001650:	2207      	movs	r2, #7
 8001652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	e000e010 	.word	0xe000e010

08001664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff29 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800168c:	f7ff ff3e 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	6978      	ldr	r0, [r7, #20]
 8001698:	f7ff ff8e 	bl	80015b8 <NVIC_EncodePriority>
 800169c:	4602      	mov	r2, r0
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff5d 	bl	8001564 <__NVIC_SetPriority>
}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff31 	bl	8001528 <__NVIC_EnableIRQ>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffa2 	bl	8001620 <SysTick_Config>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d004      	beq.n	8001704 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e00c      	b.n	800171e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2205      	movs	r2, #5
 8001708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e03b      	b.n	80017b4 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d106      	bne.n	8001756 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff f823 	bl	800079c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2202      	movs	r2, #2
 800175a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177a:	f023 0107 	bic.w	r1, r3, #7
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	68d1      	ldr	r1, [r2, #12]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_DMA2D_Start+0x1c>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e018      	b.n	800180a <HAL_DMA2D_Start+0x4e>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2202      	movs	r2, #2
 80017e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f988 	bl	8001b08 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d056      	beq.n	80018dc <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800182e:	f7ff fe19 	bl	8001464 <HAL_GetTick>
 8001832:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001834:	e04b      	b.n	80018ce <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001844:	2b00      	cmp	r3, #0
 8001846:	d023      	beq.n	8001890 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0320 	and.w	r3, r3, #32
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001856:	f043 0202 	orr.w	r2, r3, #2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2221      	movs	r2, #33	; 0x21
 800187a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2204      	movs	r2, #4
 8001880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0a5      	b.n	80019dc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001896:	d01a      	beq.n	80018ce <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001898:	f7ff fde4 	bl	8001464 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d302      	bcc.n	80018ae <HAL_DMA2D_PollForTransfer+0x9c>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10f      	bne.n	80018ce <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b2:	f043 0220 	orr.w	r2, r3, #32
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2203      	movs	r2, #3
 80018be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e086      	b.n	80019dc <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ac      	beq.n	8001836 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 0320 	and.w	r3, r3, #32
 80018e6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d061      	beq.n	80019c2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80018fe:	f7ff fdb1 	bl	8001464 <HAL_GetTick>
 8001902:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001904:	e056      	b.n	80019b4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001914:	2b00      	cmp	r3, #0
 8001916:	d02e      	beq.n	8001976 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001926:	f043 0204 	orr.w	r2, r3, #4
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193c:	f043 0202 	orr.w	r2, r3, #2
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001952:	f043 0201 	orr.w	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2229      	movs	r2, #41	; 0x29
 8001960:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2204      	movs	r2, #4
 8001966:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e032      	b.n	80019dc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d01a      	beq.n	80019b4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800197e:	f7ff fd71 	bl	8001464 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d302      	bcc.n	8001994 <HAL_DMA2D_PollForTransfer+0x182>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10f      	bne.n	80019b4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001998:	f043 0220 	orr.w	r2, r3, #32
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2203      	movs	r2, #3
 80019a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e013      	b.n	80019dc <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0a1      	beq.n	8001906 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2212      	movs	r2, #18
 80019c8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_DMA2D_ConfigLayer+0x20>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e079      	b.n	8001af8 <HAL_DMA2D_ConfigLayer+0x114>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	3318      	adds	r3, #24
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	041b      	lsls	r3, r3, #16
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001a2e:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <HAL_DMA2D_ConfigLayer+0x120>)
 8001a30:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b0a      	cmp	r3, #10
 8001a38:	d003      	beq.n	8001a42 <HAL_DMA2D_ConfigLayer+0x5e>
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b09      	cmp	r3, #9
 8001a40:	d107      	bne.n	8001a52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e005      	b.n	8001a5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	061b      	lsls	r3, r3, #24
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d120      	bne.n	8001aa6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	ea02 0103 	and.w	r1, r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b0a      	cmp	r3, #10
 8001a8c:	d003      	beq.n	8001a96 <HAL_DMA2D_ConfigLayer+0xb2>
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b09      	cmp	r3, #9
 8001a94:	d127      	bne.n	8001ae6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8001aa4:	e01f      	b.n	8001ae6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	ea02 0103 	and.w	r1, r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b0a      	cmp	r3, #10
 8001ace:	d003      	beq.n	8001ad8 <HAL_DMA2D_ConfigLayer+0xf4>
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d106      	bne.n	8001ae6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001ae4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	ff03000f 	.word	0xff03000f

08001b08 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b08b      	sub	sp, #44	; 0x2c
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	041a      	lsls	r2, r3, #16
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	431a      	orrs	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001b40:	d174      	bne.n	8001c2c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001b48:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b50:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001b58:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d108      	bne.n	8001b7a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	e053      	b.n	8001c22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d106      	bne.n	8001b90 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8e:	e048      	b.n	8001c22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d111      	bne.n	8001bbc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	0cdb      	lsrs	r3, r3, #19
 8001b9c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	0a9b      	lsrs	r3, r3, #10
 8001ba2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	08db      	lsrs	r3, r3, #3
 8001ba8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	015a      	lsls	r2, r3, #5
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	02db      	lsls	r3, r3, #11
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bba:	e032      	b.n	8001c22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d117      	bne.n	8001bf4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	0fdb      	lsrs	r3, r3, #31
 8001bc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	0cdb      	lsrs	r3, r3, #19
 8001bce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	0adb      	lsrs	r3, r3, #11
 8001bd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	029b      	lsls	r3, r3, #10
 8001be4:	431a      	orrs	r2, r3
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	03db      	lsls	r3, r3, #15
 8001bea:	4313      	orrs	r3, r2
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf2:	e016      	b.n	8001c22 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	0f1b      	lsrs	r3, r3, #28
 8001bf8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	0d1b      	lsrs	r3, r3, #20
 8001bfe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	0b1b      	lsrs	r3, r3, #12
 8001c04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	011a      	lsls	r2, r3, #4
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	431a      	orrs	r2, r3
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	031b      	lsls	r3, r3, #12
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001c2a:	e003      	b.n	8001c34 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	60da      	str	r2, [r3, #12]
}
 8001c34:	bf00      	nop
 8001c36:	372c      	adds	r7, #44	; 0x2c
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	e177      	b.n	8001f4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f040 8166 	bne.w	8001f46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d00b      	beq.n	8001c9a <HAL_GPIO_Init+0x5a>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c8e:	2b11      	cmp	r3, #17
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b12      	cmp	r3, #18
 8001c98:	d130      	bne.n	8001cfc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 0201 	and.w	r2, r3, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0xfc>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b12      	cmp	r3, #18
 8001d3a:	d123      	bne.n	8001d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	69b9      	ldr	r1, [r7, #24]
 8001d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0203 	and.w	r2, r3, #3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80c0 	beq.w	8001f46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a65      	ldr	r2, [pc, #404]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de2:	4a61      	ldr	r2, [pc, #388]	; (8001f68 <HAL_GPIO_Init+0x328>)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3302      	adds	r3, #2
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <HAL_GPIO_Init+0x32c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d037      	beq.n	8001e7e <HAL_GPIO_Init+0x23e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a57      	ldr	r2, [pc, #348]	; (8001f70 <HAL_GPIO_Init+0x330>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d031      	beq.n	8001e7a <HAL_GPIO_Init+0x23a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a56      	ldr	r2, [pc, #344]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d02b      	beq.n	8001e76 <HAL_GPIO_Init+0x236>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a55      	ldr	r2, [pc, #340]	; (8001f78 <HAL_GPIO_Init+0x338>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d025      	beq.n	8001e72 <HAL_GPIO_Init+0x232>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a54      	ldr	r2, [pc, #336]	; (8001f7c <HAL_GPIO_Init+0x33c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d01f      	beq.n	8001e6e <HAL_GPIO_Init+0x22e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a53      	ldr	r2, [pc, #332]	; (8001f80 <HAL_GPIO_Init+0x340>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d019      	beq.n	8001e6a <HAL_GPIO_Init+0x22a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a52      	ldr	r2, [pc, #328]	; (8001f84 <HAL_GPIO_Init+0x344>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_GPIO_Init+0x226>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a51      	ldr	r2, [pc, #324]	; (8001f88 <HAL_GPIO_Init+0x348>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00d      	beq.n	8001e62 <HAL_GPIO_Init+0x222>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a50      	ldr	r2, [pc, #320]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d007      	beq.n	8001e5e <HAL_GPIO_Init+0x21e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_GPIO_Init+0x21a>
 8001e56:	2309      	movs	r3, #9
 8001e58:	e012      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	e010      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e5e:	2308      	movs	r3, #8
 8001e60:	e00e      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e62:	2307      	movs	r3, #7
 8001e64:	e00c      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e00a      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	e008      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e6e:	2304      	movs	r3, #4
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e72:	2303      	movs	r3, #3
 8001e74:	e004      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	f002 0203 	and.w	r2, r2, #3
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	4093      	lsls	r3, r2
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e90:	4935      	ldr	r1, [pc, #212]	; (8001f68 <HAL_GPIO_Init+0x328>)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec2:	4a34      	ldr	r2, [pc, #208]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ec8:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eec:	4a29      	ldr	r2, [pc, #164]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f16:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	f67f ae84 	bls.w	8001c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40021400 	.word	0x40021400
 8001f84:	40021800 	.word	0x40021800
 8001f88:	40021c00 	.word	0x40021c00
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40022400 	.word	0x40022400
 8001f94:	40013c00 	.word	0x40013c00

08001f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa8:	787b      	ldrb	r3, [r7, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fb4:	e003      	b.n	8001fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	041a      	lsls	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	619a      	str	r2, [r3, #24]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fe2:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 f806 	bl	8001ffc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40013c00 	.word	0x40013c00

08001ffc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e0bf      	b.n	80021a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe fe80 	bl	8000d40 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002056:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6999      	ldr	r1, [r3, #24]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800206c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6899      	ldr	r1, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_LTDC_Init+0x19c>)
 8002088:	400b      	ands	r3, r1
 800208a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	041b      	lsls	r3, r3, #16
 8002092:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6899      	ldr	r1, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68d9      	ldr	r1, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <HAL_LTDC_Init+0x19c>)
 80020b6:	400b      	ands	r3, r1
 80020b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68d9      	ldr	r1, [r3, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1a      	ldr	r2, [r3, #32]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6919      	ldr	r1, [r3, #16]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b33      	ldr	r3, [pc, #204]	; (80021b0 <HAL_LTDC_Init+0x19c>)
 80020e4:	400b      	ands	r3, r1
 80020e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	041b      	lsls	r3, r3, #16
 80020ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6919      	ldr	r1, [r3, #16]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6959      	ldr	r1, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_LTDC_Init+0x19c>)
 8002112:	400b      	ands	r3, r1
 8002114:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6959      	ldr	r1, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0206 	orr.w	r2, r2, #6
 8002182:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	f000f800 	.word	0xf000f800

080021b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80021b4:	b5b0      	push	{r4, r5, r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_LTDC_ConfigLayer+0x1a>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e02c      	b.n	8002228 <HAL_LTDC_ConfigLayer+0x74>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2202      	movs	r2, #2
 80021da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2134      	movs	r1, #52	; 0x34
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	4614      	mov	r4, r2
 80021f2:	461d      	mov	r5, r3
 80021f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002200:	682b      	ldr	r3, [r5, #0]
 8002202:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f89d 	bl	8002348 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2201      	movs	r2, #1
 8002214:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bdb0      	pop	{r4, r5, r7, pc}

08002230 <HAL_LTDC_SetWindowSize>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowSize(LTDC_HandleTypeDef *hltdc, uint32_t XSize, uint32_t YSize, uint32_t LayerIdx)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(XSize));
  assert_param(IS_LTDC_CFBLNBR(YSize));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_LTDC_SetWindowSize+0x1c>
 8002248:	2302      	movs	r3, #2
 800224a:	e033      	b.n	80022b4 <HAL_LTDC_SetWindowSize+0x84>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2234      	movs	r2, #52	; 0x34
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	3338      	adds	r3, #56	; 0x38
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4413      	add	r3, r2
 800226a:	617b      	str	r3, [r7, #20]

  /* update horizontal stop */
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	441a      	add	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	605a      	str	r2, [r3, #4]

  /* update vertical stop */
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	441a      	add	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	60da      	str	r2, [r3, #12]

  /* Reconfigures the color frame buffer pitch in byte */
  pLayerCfg->ImageWidth = XSize;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reconfigures the frame buffer line number */
  pLayerCfg->ImageHeight = YSize;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	6979      	ldr	r1, [r7, #20]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f857 	bl	8002348 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2201      	movs	r2, #1
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_LTDC_SetWindowPosition+0x1c>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e033      	b.n	8002340 <HAL_LTDC_SetWindowPosition+0x84>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2234      	movs	r2, #52	; 0x34
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
 80022f0:	3338      	adds	r3, #56	; 0x38
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4413      	add	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	441a      	add	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	441a      	add	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	6979      	ldr	r1, [r7, #20]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 f811 	bl	8002348 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2201      	movs	r2, #1
 800232c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	0c1b      	lsrs	r3, r3, #16
 8002360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002364:	4413      	add	r3, r2
 8002366:	041b      	lsls	r3, r3, #16
 8002368:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	01db      	lsls	r3, r3, #7
 8002374:	4413      	add	r3, r2
 8002376:	3384      	adds	r3, #132	; 0x84
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	4611      	mov	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	01d2      	lsls	r2, r2, #7
 8002384:	440a      	add	r2, r1
 8002386:	3284      	adds	r2, #132	; 0x84
 8002388:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800238c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239e:	4413      	add	r3, r2
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	01db      	lsls	r3, r3, #7
 80023ac:	440b      	add	r3, r1
 80023ae:	3384      	adds	r3, #132	; 0x84
 80023b0:	4619      	mov	r1, r3
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c6:	4413      	add	r3, r2
 80023c8:	041b      	lsls	r3, r3, #16
 80023ca:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	01db      	lsls	r3, r3, #7
 80023d6:	4413      	add	r3, r2
 80023d8:	3384      	adds	r3, #132	; 0x84
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	4611      	mov	r1, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	01d2      	lsls	r2, r2, #7
 80023e6:	440a      	add	r2, r1
 80023e8:	3284      	adds	r2, #132	; 0x84
 80023ea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80023ee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fe:	4413      	add	r3, r2
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	01db      	lsls	r3, r3, #7
 800240c:	440b      	add	r3, r1
 800240e:	3384      	adds	r3, #132	; 0x84
 8002410:	4619      	mov	r1, r3
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	4313      	orrs	r3, r2
 8002416:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	01db      	lsls	r3, r3, #7
 8002422:	4413      	add	r3, r2
 8002424:	3384      	adds	r3, #132	; 0x84
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	4611      	mov	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	01d2      	lsls	r2, r2, #7
 8002432:	440a      	add	r2, r1
 8002434:	3284      	adds	r2, #132	; 0x84
 8002436:	f023 0307 	bic.w	r3, r3, #7
 800243a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	01db      	lsls	r3, r3, #7
 8002446:	4413      	add	r3, r2
 8002448:	3384      	adds	r3, #132	; 0x84
 800244a:	461a      	mov	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	061b      	lsls	r3, r3, #24
 800246c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	01db      	lsls	r3, r3, #7
 8002478:	4413      	add	r3, r2
 800247a:	3384      	adds	r3, #132	; 0x84
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	01db      	lsls	r3, r3, #7
 8002488:	4413      	add	r3, r2
 800248a:	3384      	adds	r3, #132	; 0x84
 800248c:	461a      	mov	r2, r3
 800248e:	2300      	movs	r3, #0
 8002490:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002498:	461a      	mov	r2, r3
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	431a      	orrs	r2, r3
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4619      	mov	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	01db      	lsls	r3, r3, #7
 80024ac:	440b      	add	r3, r1
 80024ae:	3384      	adds	r3, #132	; 0x84
 80024b0:	4619      	mov	r1, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	01db      	lsls	r3, r3, #7
 80024c2:	4413      	add	r3, r2
 80024c4:	3384      	adds	r3, #132	; 0x84
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	4611      	mov	r1, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	01d2      	lsls	r2, r2, #7
 80024d2:	440a      	add	r2, r1
 80024d4:	3284      	adds	r2, #132	; 0x84
 80024d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024da:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	01db      	lsls	r3, r3, #7
 80024e6:	4413      	add	r3, r2
 80024e8:	3384      	adds	r3, #132	; 0x84
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	01db      	lsls	r3, r3, #7
 80024fc:	4413      	add	r3, r2
 80024fe:	3384      	adds	r3, #132	; 0x84
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	4611      	mov	r1, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	01d2      	lsls	r2, r2, #7
 800250c:	440a      	add	r2, r1
 800250e:	3284      	adds	r2, #132	; 0x84
 8002510:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002514:	f023 0307 	bic.w	r3, r3, #7
 8002518:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	69da      	ldr	r2, [r3, #28]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	6809      	ldr	r1, [r1, #0]
 8002526:	4608      	mov	r0, r1
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	01c9      	lsls	r1, r1, #7
 800252c:	4401      	add	r1, r0
 800252e:	3184      	adds	r1, #132	; 0x84
 8002530:	4313      	orrs	r3, r2
 8002532:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	01db      	lsls	r3, r3, #7
 800253e:	4413      	add	r3, r2
 8002540:	3384      	adds	r3, #132	; 0x84
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	01db      	lsls	r3, r3, #7
 800254e:	4413      	add	r3, r2
 8002550:	3384      	adds	r3, #132	; 0x84
 8002552:	461a      	mov	r2, r3
 8002554:	2300      	movs	r3, #0
 8002556:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	01db      	lsls	r3, r3, #7
 8002562:	4413      	add	r3, r2
 8002564:	3384      	adds	r3, #132	; 0x84
 8002566:	461a      	mov	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002576:	2304      	movs	r3, #4
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	e01b      	b.n	80025b4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d102      	bne.n	800258a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002584:	2303      	movs	r3, #3
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	e014      	b.n	80025b4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b04      	cmp	r3, #4
 8002590:	d00b      	beq.n	80025aa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002596:	2b02      	cmp	r3, #2
 8002598:	d007      	beq.n	80025aa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d003      	beq.n	80025aa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80025a6:	2b07      	cmp	r3, #7
 80025a8:	d102      	bne.n	80025b0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	e001      	b.n	80025b4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80025b0:	2301      	movs	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	01db      	lsls	r3, r3, #7
 80025be:	4413      	add	r3, r2
 80025c0:	3384      	adds	r3, #132	; 0x84
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	4611      	mov	r1, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	01d2      	lsls	r2, r2, #7
 80025ce:	440a      	add	r2, r1
 80025d0:	3284      	adds	r2, #132	; 0x84
 80025d2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80025d6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	041a      	lsls	r2, r3, #16
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	1acb      	subs	r3, r1, r3
 80025ee:	69f9      	ldr	r1, [r7, #28]
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	3303      	adds	r3, #3
 80025f6:	68f9      	ldr	r1, [r7, #12]
 80025f8:	6809      	ldr	r1, [r1, #0]
 80025fa:	4608      	mov	r0, r1
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	01c9      	lsls	r1, r1, #7
 8002600:	4401      	add	r1, r0
 8002602:	3184      	adds	r1, #132	; 0x84
 8002604:	4313      	orrs	r3, r2
 8002606:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	01db      	lsls	r3, r3, #7
 8002612:	4413      	add	r3, r2
 8002614:	3384      	adds	r3, #132	; 0x84
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	4611      	mov	r1, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	01d2      	lsls	r2, r2, #7
 8002622:	440a      	add	r2, r1
 8002624:	3284      	adds	r2, #132	; 0x84
 8002626:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800262a:	f023 0307 	bic.w	r3, r3, #7
 800262e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	01db      	lsls	r3, r3, #7
 800263a:	4413      	add	r3, r2
 800263c:	3384      	adds	r3, #132	; 0x84
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	01db      	lsls	r3, r3, #7
 8002650:	4413      	add	r3, r2
 8002652:	3384      	adds	r3, #132	; 0x84
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	4611      	mov	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	01d2      	lsls	r2, r2, #7
 8002660:	440a      	add	r2, r1
 8002662:	3284      	adds	r2, #132	; 0x84
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6013      	str	r3, [r2, #0]
}
 800266a:	bf00      	nop
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <HAL_PWREx_EnableOverDrive+0x90>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <HAL_PWREx_EnableOverDrive+0x90>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_PWREx_EnableOverDrive+0x90>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_PWREx_EnableOverDrive+0x94>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026a4:	f7fe fede 	bl	8001464 <HAL_GetTick>
 80026a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026aa:	e009      	b.n	80026c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026ac:	f7fe feda 	bl	8001464 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ba:	d901      	bls.n	80026c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e01f      	b.n	8002700 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_PWREx_EnableOverDrive+0x98>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d1ee      	bne.n	80026ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026d4:	f7fe fec6 	bl	8001464 <HAL_GetTick>
 80026d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026da:	e009      	b.n	80026f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026dc:	f7fe fec2 	bl	8001464 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ea:	d901      	bls.n	80026f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e007      	b.n	8002700 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_PWREx_EnableOverDrive+0x98>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026fc:	d1ee      	bne.n	80026dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	420e0040 	.word	0x420e0040
 8002710:	40007000 	.word	0x40007000
 8002714:	420e0044 	.word	0x420e0044

08002718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e25e      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d075      	beq.n	8002822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002736:	4b88      	ldr	r3, [pc, #544]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b04      	cmp	r3, #4
 8002740:	d00c      	beq.n	800275c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002742:	4b85      	ldr	r3, [pc, #532]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800274a:	2b08      	cmp	r3, #8
 800274c:	d112      	bne.n	8002774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274e:	4b82      	ldr	r3, [pc, #520]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275a:	d10b      	bne.n	8002774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	4b7e      	ldr	r3, [pc, #504]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05b      	beq.n	8002820 <HAL_RCC_OscConfig+0x108>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d157      	bne.n	8002820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e239      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d106      	bne.n	800278c <HAL_RCC_OscConfig+0x74>
 800277e:	4b76      	ldr	r3, [pc, #472]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a75      	ldr	r2, [pc, #468]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e01d      	b.n	80027c8 <HAL_RCC_OscConfig+0xb0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x98>
 8002796:	4b70      	ldr	r3, [pc, #448]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6f      	ldr	r2, [pc, #444]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800279c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b6d      	ldr	r3, [pc, #436]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6c      	ldr	r2, [pc, #432]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0xb0>
 80027b0:	4b69      	ldr	r3, [pc, #420]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a68      	ldr	r2, [pc, #416]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b66      	ldr	r3, [pc, #408]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a65      	ldr	r2, [pc, #404]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fe48 	bl	8001464 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fe44 	bl	8001464 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e1fe      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b5b      	ldr	r3, [pc, #364]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0xc0>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fe34 	bl	8001464 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fe30 	bl	8001464 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1ea      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	4b51      	ldr	r3, [pc, #324]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0xe8>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d063      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800282e:	4b4a      	ldr	r3, [pc, #296]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283a:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002842:	2b08      	cmp	r3, #8
 8002844:	d11c      	bne.n	8002880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002846:	4b44      	ldr	r3, [pc, #272]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d116      	bne.n	8002880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	4b41      	ldr	r3, [pc, #260]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_RCC_OscConfig+0x152>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e1be      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286a:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4937      	ldr	r1, [pc, #220]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287e:	e03a      	b.n	80028f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d020      	beq.n	80028ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <HAL_RCC_OscConfig+0x244>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fe fde9 	bl	8001464 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe fde5 	bl	8001464 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e19f      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b4:	4b28      	ldr	r3, [pc, #160]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4925      	ldr	r1, [pc, #148]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]
 80028c8:	e015      	b.n	80028f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ca:	4b24      	ldr	r3, [pc, #144]	; (800295c <HAL_RCC_OscConfig+0x244>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7fe fdc8 	bl	8001464 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d8:	f7fe fdc4 	bl	8001464 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e17e      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d036      	beq.n	8002970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_RCC_OscConfig+0x248>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe fda8 	bl	8001464 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002918:	f7fe fda4 	bl	8001464 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e15e      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800292c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x200>
 8002936:	e01b      	b.n	8002970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_OscConfig+0x248>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7fe fd91 	bl	8001464 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002944:	e00e      	b.n	8002964 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002946:	f7fe fd8d 	bl	8001464 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d907      	bls.n	8002964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e147      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
 8002958:	40023800 	.word	0x40023800
 800295c:	42470000 	.word	0x42470000
 8002960:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002964:	4b88      	ldr	r3, [pc, #544]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ea      	bne.n	8002946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8097 	beq.w	8002aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002982:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10f      	bne.n	80029ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	4b7d      	ldr	r3, [pc, #500]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	4a7c      	ldr	r2, [pc, #496]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299c:	6413      	str	r3, [r2, #64]	; 0x40
 800299e:	4b7a      	ldr	r3, [pc, #488]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029aa:	2301      	movs	r3, #1
 80029ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ae:	4b77      	ldr	r3, [pc, #476]	; (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d118      	bne.n	80029ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ba:	4b74      	ldr	r3, [pc, #464]	; (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a73      	ldr	r2, [pc, #460]	; (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c6:	f7fe fd4d 	bl	8001464 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ce:	f7fe fd49 	bl	8001464 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e103      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	4b6a      	ldr	r3, [pc, #424]	; (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d106      	bne.n	8002a02 <HAL_RCC_OscConfig+0x2ea>
 80029f4:	4b64      	ldr	r3, [pc, #400]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a63      	ldr	r2, [pc, #396]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002a00:	e01c      	b.n	8002a3c <HAL_RCC_OscConfig+0x324>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x30c>
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a5e      	ldr	r2, [pc, #376]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
 8002a16:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	4a5b      	ldr	r2, [pc, #364]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6713      	str	r3, [r2, #112]	; 0x70
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0x324>
 8002a24:	4b58      	ldr	r3, [pc, #352]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	4a57      	ldr	r2, [pc, #348]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a30:	4b55      	ldr	r3, [pc, #340]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	4a54      	ldr	r2, [pc, #336]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a36:	f023 0304 	bic.w	r3, r3, #4
 8002a3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d015      	beq.n	8002a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe fd0e 	bl	8001464 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fd0a 	bl	8001464 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e0c2      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a62:	4b49      	ldr	r3, [pc, #292]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0ee      	beq.n	8002a4c <HAL_RCC_OscConfig+0x334>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a70:	f7fe fcf8 	bl	8001464 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7fe fcf4 	bl	8001464 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e0ac      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8e:	4b3e      	ldr	r3, [pc, #248]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1ee      	bne.n	8002a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d105      	bne.n	8002aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa0:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	4a38      	ldr	r2, [pc, #224]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8098 	beq.w	8002be6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab6:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d05c      	beq.n	8002b7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d141      	bne.n	8002b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aca:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <HAL_RCC_OscConfig+0x478>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fcc8 	bl	8001464 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe fcc4 	bl	8001464 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e07e      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	019b      	lsls	r3, r3, #6
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	061b      	lsls	r3, r3, #24
 8002b1a:	491b      	ldr	r1, [pc, #108]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b20:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <HAL_RCC_OscConfig+0x478>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe fc9d 	bl	8001464 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7fe fc99 	bl	8001464 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e053      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x416>
 8002b4c:	e04b      	b.n	8002be6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_RCC_OscConfig+0x478>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe fc86 	bl	8001464 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe fc82 	bl	8001464 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e03c      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x444>
 8002b7a:	e034      	b.n	8002be6 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e02f      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d11c      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d115      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10d      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0cc      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c08:	4b68      	ldr	r3, [pc, #416]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d90c      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b65      	ldr	r3, [pc, #404]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b63      	ldr	r3, [pc, #396]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0b8      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d020      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c48:	4b59      	ldr	r3, [pc, #356]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4a58      	ldr	r2, [pc, #352]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c60:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a52      	ldr	r2, [pc, #328]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6c:	4b50      	ldr	r3, [pc, #320]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	494d      	ldr	r1, [pc, #308]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d044      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d119      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e07f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d003      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb2:	4b3f      	ldr	r3, [pc, #252]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc2:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e067      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd2:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f023 0203 	bic.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4934      	ldr	r1, [pc, #208]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce4:	f7fe fbbe 	bl	8001464 <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cec:	f7fe fbba 	bl	8001464 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e04f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 020c 	and.w	r2, r3, #12
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1eb      	bne.n	8002cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d20c      	bcs.n	8002d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e032      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4916      	ldr	r1, [pc, #88]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d66:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	490e      	ldr	r1, [pc, #56]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d7a:	f000 f821 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	490a      	ldr	r1, [pc, #40]	; (8002db4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	5ccb      	ldrb	r3, [r1, r3]
 8002d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe fb1e 	bl	80013dc <HAL_InitTick>

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023c00 	.word	0x40023c00
 8002db0:	40023800 	.word	0x40023800
 8002db4:	080045dc 	.word	0x080045dc
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	20000004 	.word	0x20000004

08002dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc4:	b090      	sub	sp, #64	; 0x40
 8002dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
 8002dcc:	2300      	movs	r3, #0
 8002dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd8:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d00d      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x40>
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	f200 80a1 	bhi.w	8002f2c <HAL_RCC_GetSysClockFreq+0x16c>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d003      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8002df2:	e09b      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002df4:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x184>)
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002df8:	e09b      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dfa:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dfe:	e098      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e00:	4b4f      	ldr	r3, [pc, #316]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e0a:	4b4d      	ldr	r3, [pc, #308]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d028      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e16:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	099b      	lsrs	r3, r3, #6
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	627a      	str	r2, [r7, #36]	; 0x24
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e2c:	fb03 f201 	mul.w	r2, r3, r1
 8002e30:	2300      	movs	r3, #0
 8002e32:	fb00 f303 	mul.w	r3, r0, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	4a43      	ldr	r2, [pc, #268]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e3a:	fba0 1202 	umull	r1, r2, r0, r2
 8002e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e40:	460a      	mov	r2, r1
 8002e42:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e46:	4413      	add	r3, r2
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	61fa      	str	r2, [r7, #28]
 8002e52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e5a:	f7fd f9c7 	bl	80001ec <__aeabi_uldivmod>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4613      	mov	r3, r2
 8002e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e66:	e053      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e68:	4b35      	ldr	r3, [pc, #212]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	099b      	lsrs	r3, r3, #6
 8002e6e:	2200      	movs	r2, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	617a      	str	r2, [r7, #20]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e7a:	f04f 0b00 	mov.w	fp, #0
 8002e7e:	4652      	mov	r2, sl
 8002e80:	465b      	mov	r3, fp
 8002e82:	f04f 0000 	mov.w	r0, #0
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	0159      	lsls	r1, r3, #5
 8002e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e90:	0150      	lsls	r0, r2, #5
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	ebb2 080a 	subs.w	r8, r2, sl
 8002e9a:	eb63 090b 	sbc.w	r9, r3, fp
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002eaa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002eae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002eb2:	ebb2 0408 	subs.w	r4, r2, r8
 8002eb6:	eb63 0509 	sbc.w	r5, r3, r9
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	00eb      	lsls	r3, r5, #3
 8002ec4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec8:	00e2      	lsls	r2, r4, #3
 8002eca:	4614      	mov	r4, r2
 8002ecc:	461d      	mov	r5, r3
 8002ece:	eb14 030a 	adds.w	r3, r4, sl
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	eb45 030b 	adc.w	r3, r5, fp
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	028b      	lsls	r3, r1, #10
 8002eea:	4621      	mov	r1, r4
 8002eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	028a      	lsls	r2, r1, #10
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efa:	2200      	movs	r2, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	60fa      	str	r2, [r7, #12]
 8002f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f04:	f7fd f972 	bl	80001ec <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3740      	adds	r7, #64	; 0x40
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	00f42400 	.word	0x00f42400
 8002f48:	017d7840 	.word	0x017d7840

08002f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000000 	.word	0x20000000

08002f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f68:	f7ff fff0 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0a9b      	lsrs	r3, r3, #10
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	080045ec 	.word	0x080045ec

08002f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f90:	f7ff ffdc 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0b5b      	lsrs	r3, r3, #13
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	080045ec 	.word	0x080045ec

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d075      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fe8:	4b91      	ldr	r3, [pc, #580]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fee:	f7fe fa39 	bl	8001464 <HAL_GetTick>
 8002ff2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ff6:	f7fe fa35 	bl	8001464 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e189      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003008:	4b8a      	ldr	r3, [pc, #552]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f0      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d009      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	019a      	lsls	r2, r3, #6
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	071b      	lsls	r3, r3, #28
 800302c:	4981      	ldr	r1, [pc, #516]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01f      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003040:	4b7c      	ldr	r3, [pc, #496]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003046:	0f1b      	lsrs	r3, r3, #28
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	019a      	lsls	r2, r3, #6
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	061b      	lsls	r3, r3, #24
 800305a:	431a      	orrs	r2, r3
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	071b      	lsls	r3, r3, #28
 8003060:	4974      	ldr	r1, [pc, #464]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003068:	4b72      	ldr	r3, [pc, #456]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800306a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800306e:	f023 021f 	bic.w	r2, r3, #31
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	3b01      	subs	r3, #1
 8003078:	496e      	ldr	r1, [pc, #440]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00d      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	019a      	lsls	r2, r3, #6
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	061b      	lsls	r3, r3, #24
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	071b      	lsls	r3, r3, #28
 80030a0:	4964      	ldr	r1, [pc, #400]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030a8:	4b61      	ldr	r3, [pc, #388]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030ae:	f7fe f9d9 	bl	8001464 <HAL_GetTick>
 80030b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030b6:	f7fe f9d5 	bl	8001464 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e129      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030c8:	4b5a      	ldr	r3, [pc, #360]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d079      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030ec:	4b52      	ldr	r3, [pc, #328]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030f2:	f7fe f9b7 	bl	8001464 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80030fa:	f7fe f9b3 	bl	8001464 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e107      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800310c:	4b49      	ldr	r3, [pc, #292]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003118:	d0ef      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d020      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003126:	4b43      	ldr	r3, [pc, #268]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	0f1b      	lsrs	r3, r3, #28
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	019a      	lsls	r2, r3, #6
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	061b      	lsls	r3, r3, #24
 8003140:	431a      	orrs	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	071b      	lsls	r3, r3, #28
 8003146:	493b      	ldr	r1, [pc, #236]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800314e:	4b39      	ldr	r3, [pc, #228]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003154:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	3b01      	subs	r3, #1
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	4934      	ldr	r1, [pc, #208]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01e      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003174:	4b2f      	ldr	r3, [pc, #188]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	0e1b      	lsrs	r3, r3, #24
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	019a      	lsls	r2, r3, #6
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	061b      	lsls	r3, r3, #24
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	071b      	lsls	r3, r3, #28
 8003194:	4927      	ldr	r1, [pc, #156]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800319c:	4b25      	ldr	r3, [pc, #148]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800319e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	4922      	ldr	r1, [pc, #136]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031b2:	4b21      	ldr	r3, [pc, #132]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031b8:	f7fe f954 	bl	8001464 <HAL_GetTick>
 80031bc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80031c0:	f7fe f950 	bl	8001464 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0a4      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031de:	d1ef      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 808b 	beq.w	8003304 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6413      	str	r3, [r2, #64]	; 0x40
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a0b      	ldr	r2, [pc, #44]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003216:	f7fe f925 	bl	8001464 <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800321c:	e010      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fe f921 	bl	8001464 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d909      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e075      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003230:	42470068 	.word	0x42470068
 8003234:	40023800 	.word	0x40023800
 8003238:	42470070 	.word	0x42470070
 800323c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003240:	4b38      	ldr	r3, [pc, #224]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0e8      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800324c:	4b36      	ldr	r3, [pc, #216]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003254:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d02f      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	429a      	cmp	r2, r3
 8003268:	d028      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800326a:	4b2f      	ldr	r3, [pc, #188]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003272:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003274:	4b2d      	ldr	r3, [pc, #180]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800327a:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003280:	4a29      	ldr	r2, [pc, #164]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003286:	4b28      	ldr	r3, [pc, #160]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d114      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003292:	f7fe f8e7 	bl	8001464 <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe f8e3 	bl	8001464 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e035      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b0:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ee      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032c8:	d10d      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80032da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032de:	4912      	ldr	r1, [pc, #72]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]
 80032e4:	e005      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80032ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80032f0:	6093      	str	r3, [r2, #8]
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80032f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fe:	490a      	ldr	r1, [pc, #40]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003300:	4313      	orrs	r3, r2
 8003302:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003318:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40007000 	.word	0x40007000
 8003328:	40023800 	.word	0x40023800
 800332c:	42470e40 	.word	0x42470e40
 8003330:	424711e0 	.word	0x424711e0

08003334 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e025      	b.n	8003394 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d106      	bne.n	8003362 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fd fb1f 	bl	80009a0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3304      	adds	r3, #4
 8003372:	4619      	mov	r1, r3
 8003374:	4610      	mov	r0, r2
 8003376:	f000 ffb7 	bl	80042e8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	461a      	mov	r2, r3
 8003384:	6839      	ldr	r1, [r7, #0]
 8003386:	f001 f822 	bl	80043ce <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d101      	bne.n	80033b8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
 80033b6:	e018      	b.n	80033ea <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 f87f 	bl	80044cc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d104      	bne.n	80033e0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2205      	movs	r2, #5
 80033da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80033de:	e003      	b.n	80033e8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d101      	bne.n	800340c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
 800340a:	e00e      	b.n	800342a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6839      	ldr	r1, [r7, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f001 f892 	bl	8004544 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e03f      	b.n	80034c4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fd ff23 	bl	80012a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2224      	movs	r2, #36	; 0x24
 8003462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003474:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa68 	bl	800394c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800348a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800349a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10d      	bne.n	800351e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_UART_IRQHandler+0x52>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f996 	bl	8003848 <UART_Receive_IT>
      return;
 800351c:	e0d0      	b.n	80036c0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80b0 	beq.w	8003686 <HAL_UART_IRQHandler+0x1ba>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d105      	bne.n	800353c <HAL_UART_IRQHandler+0x70>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80a5 	beq.w	8003686 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_UART_IRQHandler+0x90>
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	f043 0201 	orr.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_UART_IRQHandler+0xb0>
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	f043 0202 	orr.w	r2, r3, #2
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_UART_IRQHandler+0xd0>
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	f043 0204 	orr.w	r2, r3, #4
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00f      	beq.n	80035c6 <HAL_UART_IRQHandler+0xfa>
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d104      	bne.n	80035ba <HAL_UART_IRQHandler+0xee>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	f043 0208 	orr.w	r2, r3, #8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d077      	beq.n	80036be <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_UART_IRQHandler+0x11c>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f930 	bl	8003848 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	bf0c      	ite	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	2300      	movne	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <HAL_UART_IRQHandler+0x144>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d031      	beq.n	8003674 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f879 	bl	8003708 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	d123      	bne.n	800366c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003632:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003640:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <HAL_UART_IRQHandler+0x1fc>)
 8003642:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe f84c 	bl	80016e6 <HAL_DMA_Abort_IT>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d016      	beq.n	8003682 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800365e:	4610      	mov	r0, r2
 8003660:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003662:	e00e      	b.n	8003682 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f845 	bl	80036f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366a:	e00a      	b.n	8003682 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f841 	bl	80036f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003672:	e006      	b.n	8003682 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f83d 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003680:	e01d      	b.n	80036be <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003682:	bf00      	nop
    return;
 8003684:	e01b      	b.n	80036be <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_UART_IRQHandler+0x1d6>
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f866 	bl	800376c <UART_Transmit_IT>
    return;
 80036a0:	e00e      	b.n	80036c0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <HAL_UART_IRQHandler+0x1f4>
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8ae 	bl	8003818 <UART_EndTransmit_IT>
    return;
 80036bc:	e000      	b.n	80036c0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80036be:	bf00      	nop
  }
}
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	08003745 	.word	0x08003745

080036cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800371e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff ffc8 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b21      	cmp	r3, #33	; 0x21
 800377e:	d144      	bne.n	800380a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d11a      	bne.n	80037c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800379e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	1c9a      	adds	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	621a      	str	r2, [r3, #32]
 80037b2:	e00e      	b.n	80037d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	621a      	str	r2, [r3, #32]
 80037be:	e008      	b.n	80037d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	1c59      	adds	r1, r3, #1
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6211      	str	r1, [r2, #32]
 80037ca:	781a      	ldrb	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29b      	uxth	r3, r3
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4619      	mov	r1, r3
 80037e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003804:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff47 	bl	80036cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b22      	cmp	r3, #34	; 0x22
 800385a:	d171      	bne.n	8003940 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003864:	d123      	bne.n	80038ae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10e      	bne.n	8003892 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	1c9a      	adds	r2, r3, #2
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
 8003890:	e029      	b.n	80038e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	b29b      	uxth	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28
 80038ac:	e01b      	b.n	80038e6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6858      	ldr	r0, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	1c59      	adds	r1, r3, #1
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6291      	str	r1, [r2, #40]	; 0x28
 80038c6:	b2c2      	uxtb	r2, r0
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e00c      	b.n	80038e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	1c58      	adds	r0, r3, #1
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	6288      	str	r0, [r1, #40]	; 0x28
 80038de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4619      	mov	r1, r3
 80038f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d120      	bne.n	800393c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0220 	bic.w	r2, r2, #32
 8003908:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003918:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff fed4 	bl	80036e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	e002      	b.n	8003942 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800394c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003950:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003954:	af00      	add	r7, sp, #0
 8003956:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800395a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003966:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800396a:	68d9      	ldr	r1, [r3, #12]
 800396c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	ea40 0301 	orr.w	r3, r0, r1
 8003976:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003978:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	431a      	orrs	r2, r3
 8003986:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	431a      	orrs	r2, r3
 800398e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800399a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039a6:	f021 010c 	bic.w	r1, r1, #12
 80039aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80039b4:	430b      	orrs	r3, r1
 80039b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80039c8:	6999      	ldr	r1, [r3, #24]
 80039ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	ea40 0301 	orr.w	r3, r0, r1
 80039d4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e0:	f040 824a 	bne.w	8003e78 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b96      	ldr	r3, [pc, #600]	; (8003c44 <UART_SetConfig+0x2f8>)
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d006      	beq.n	80039fe <UART_SetConfig+0xb2>
 80039f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b94      	ldr	r3, [pc, #592]	; (8003c48 <UART_SetConfig+0x2fc>)
 80039f8:	429a      	cmp	r2, r3
 80039fa:	f040 8129 	bne.w	8003c50 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039fe:	f7ff fac5 	bl	8002f8c <HAL_RCC_GetPCLK2Freq>
 8003a02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8003a10:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8003a14:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8003a18:	4622      	mov	r2, r4
 8003a1a:	462b      	mov	r3, r5
 8003a1c:	1891      	adds	r1, r2, r2
 8003a1e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003a22:	415b      	adcs	r3, r3
 8003a24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a28:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	1851      	adds	r1, r2, r1
 8003a30:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003a34:	4629      	mov	r1, r5
 8003a36:	414b      	adcs	r3, r1
 8003a38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8003a48:	4649      	mov	r1, r9
 8003a4a:	00cb      	lsls	r3, r1, #3
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a52:	4641      	mov	r1, r8
 8003a54:	00ca      	lsls	r2, r1, #3
 8003a56:	4610      	mov	r0, r2
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4622      	mov	r2, r4
 8003a5e:	189b      	adds	r3, r3, r2
 8003a60:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003a64:	462b      	mov	r3, r5
 8003a66:	460a      	mov	r2, r1
 8003a68:	eb42 0303 	adc.w	r3, r2, r3
 8003a6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8003a70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003a7c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8003a80:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8003a84:	460b      	mov	r3, r1
 8003a86:	18db      	adds	r3, r3, r3
 8003a88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	eb42 0303 	adc.w	r3, r2, r3
 8003a92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a96:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003a9a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8003a9e:	f7fc fba5 	bl	80001ec <__aeabi_uldivmod>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4b69      	ldr	r3, [pc, #420]	; (8003c4c <UART_SetConfig+0x300>)
 8003aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	011c      	lsls	r4, r3, #4
 8003ab0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8003aba:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003abe:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8003ac2:	4642      	mov	r2, r8
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	1891      	adds	r1, r2, r2
 8003ac8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003acc:	415b      	adcs	r3, r3
 8003ace:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003ad2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8003ad6:	4641      	mov	r1, r8
 8003ad8:	1851      	adds	r1, r2, r1
 8003ada:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003ade:	4649      	mov	r1, r9
 8003ae0:	414b      	adcs	r3, r1
 8003ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8003af2:	4659      	mov	r1, fp
 8003af4:	00cb      	lsls	r3, r1, #3
 8003af6:	4651      	mov	r1, sl
 8003af8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003afc:	4651      	mov	r1, sl
 8003afe:	00ca      	lsls	r2, r1, #3
 8003b00:	4610      	mov	r0, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	4603      	mov	r3, r0
 8003b06:	4642      	mov	r2, r8
 8003b08:	189b      	adds	r3, r3, r2
 8003b0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8003b0e:	464b      	mov	r3, r9
 8003b10:	460a      	mov	r2, r1
 8003b12:	eb42 0303 	adc.w	r3, r2, r3
 8003b16:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8003b1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003b26:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8003b2a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8003b2e:	460b      	mov	r3, r1
 8003b30:	18db      	adds	r3, r3, r3
 8003b32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b36:	4613      	mov	r3, r2
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b40:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8003b44:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8003b48:	f7fc fb50 	bl	80001ec <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4611      	mov	r1, r2
 8003b52:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <UART_SetConfig+0x300>)
 8003b54:	fba3 2301 	umull	r2, r3, r3, r1
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	2264      	movs	r2, #100	; 0x64
 8003b5c:	fb02 f303 	mul.w	r3, r2, r3
 8003b60:	1acb      	subs	r3, r1, r3
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b68:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <UART_SetConfig+0x300>)
 8003b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b76:	441c      	add	r4, r3
 8003b78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003b82:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8003b86:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8003b8a:	4642      	mov	r2, r8
 8003b8c:	464b      	mov	r3, r9
 8003b8e:	1891      	adds	r1, r2, r2
 8003b90:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003b94:	415b      	adcs	r3, r3
 8003b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b9a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003b9e:	4641      	mov	r1, r8
 8003ba0:	1851      	adds	r1, r2, r1
 8003ba2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	414b      	adcs	r3, r1
 8003baa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8003bba:	4659      	mov	r1, fp
 8003bbc:	00cb      	lsls	r3, r1, #3
 8003bbe:	4651      	mov	r1, sl
 8003bc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc4:	4651      	mov	r1, sl
 8003bc6:	00ca      	lsls	r2, r1, #3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4603      	mov	r3, r0
 8003bce:	4642      	mov	r2, r8
 8003bd0:	189b      	adds	r3, r3, r2
 8003bd2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	460a      	mov	r2, r1
 8003bda:	eb42 0303 	adc.w	r3, r2, r3
 8003bde:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003be2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003bee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8003bf2:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	18db      	adds	r3, r3, r3
 8003bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bfe:	4613      	mov	r3, r2
 8003c00:	eb42 0303 	adc.w	r3, r2, r3
 8003c04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c08:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003c0c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8003c10:	f7fc faec 	bl	80001ec <__aeabi_uldivmod>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <UART_SetConfig+0x300>)
 8003c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	2164      	movs	r1, #100	; 0x64
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	3332      	adds	r3, #50	; 0x32
 8003c2c:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <UART_SetConfig+0x300>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	f003 0207 	and.w	r2, r3, #7
 8003c38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4422      	add	r2, r4
 8003c40:	609a      	str	r2, [r3, #8]
 8003c42:	e349      	b.n	80042d8 <UART_SetConfig+0x98c>
 8003c44:	40011000 	.word	0x40011000
 8003c48:	40011400 	.word	0x40011400
 8003c4c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c50:	f7ff f988 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8003c54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003c62:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8003c66:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	462b      	mov	r3, r5
 8003c6e:	1891      	adds	r1, r2, r2
 8003c70:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003c74:	415b      	adcs	r3, r3
 8003c76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c7a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c7e:	4621      	mov	r1, r4
 8003c80:	eb12 0a01 	adds.w	sl, r2, r1
 8003c84:	4629      	mov	r1, r5
 8003c86:	eb43 0b01 	adc.w	fp, r3, r1
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c9e:	4692      	mov	sl, r2
 8003ca0:	469b      	mov	fp, r3
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	eb1a 0303 	adds.w	r3, sl, r3
 8003ca8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003cac:	462b      	mov	r3, r5
 8003cae:	eb4b 0303 	adc.w	r3, fp, r3
 8003cb2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003cb6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8003cc2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003cc6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8003cca:	460b      	mov	r3, r1
 8003ccc:	18db      	adds	r3, r3, r3
 8003cce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	eb42 0303 	adc.w	r3, r2, r3
 8003cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cdc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003ce0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8003ce4:	f7fc fa82 	bl	80001ec <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4b61      	ldr	r3, [pc, #388]	; (8003e74 <UART_SetConfig+0x528>)
 8003cee:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	011c      	lsls	r4, r3, #4
 8003cf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003d00:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8003d04:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8003d08:	4642      	mov	r2, r8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	1891      	adds	r1, r2, r2
 8003d0e:	67b9      	str	r1, [r7, #120]	; 0x78
 8003d10:	415b      	adcs	r3, r3
 8003d12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d14:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003d18:	4641      	mov	r1, r8
 8003d1a:	1851      	adds	r1, r2, r1
 8003d1c:	6739      	str	r1, [r7, #112]	; 0x70
 8003d1e:	4649      	mov	r1, r9
 8003d20:	414b      	adcs	r3, r1
 8003d22:	677b      	str	r3, [r7, #116]	; 0x74
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8003d30:	4659      	mov	r1, fp
 8003d32:	00cb      	lsls	r3, r1, #3
 8003d34:	4651      	mov	r1, sl
 8003d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d3a:	4651      	mov	r1, sl
 8003d3c:	00ca      	lsls	r2, r1, #3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	4642      	mov	r2, r8
 8003d46:	189b      	adds	r3, r3, r2
 8003d48:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003d4c:	464b      	mov	r3, r9
 8003d4e:	460a      	mov	r2, r1
 8003d50:	eb42 0303 	adc.w	r3, r2, r3
 8003d54:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003d58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003d64:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8003d68:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	18db      	adds	r3, r3, r3
 8003d70:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d72:	4613      	mov	r3, r2
 8003d74:	eb42 0303 	adc.w	r3, r2, r3
 8003d78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d7a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003d7e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d82:	f7fc fa33 	bl	80001ec <__aeabi_uldivmod>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <UART_SetConfig+0x528>)
 8003d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2264      	movs	r2, #100	; 0x64
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	1acb      	subs	r3, r1, r3
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003da2:	4b34      	ldr	r3, [pc, #208]	; (8003e74 <UART_SetConfig+0x528>)
 8003da4:	fba3 2302 	umull	r2, r3, r3, r2
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003db0:	441c      	add	r4, r3
 8003db2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003dbc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003dc0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8003dc4:	4642      	mov	r2, r8
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	1891      	adds	r1, r2, r2
 8003dca:	6639      	str	r1, [r7, #96]	; 0x60
 8003dcc:	415b      	adcs	r3, r3
 8003dce:	667b      	str	r3, [r7, #100]	; 0x64
 8003dd0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	1851      	adds	r1, r2, r1
 8003dd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dda:	4649      	mov	r1, r9
 8003ddc:	414b      	adcs	r3, r1
 8003dde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8003dec:	4659      	mov	r1, fp
 8003dee:	00cb      	lsls	r3, r1, #3
 8003df0:	4651      	mov	r1, sl
 8003df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df6:	4651      	mov	r1, sl
 8003df8:	00ca      	lsls	r2, r1, #3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4642      	mov	r2, r8
 8003e02:	189b      	adds	r3, r3, r2
 8003e04:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003e08:	464b      	mov	r3, r9
 8003e0a:	460a      	mov	r2, r1
 8003e0c:	eb42 0303 	adc.w	r3, r2, r3
 8003e10:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003e14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003e20:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8003e24:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8003e28:	460b      	mov	r3, r1
 8003e2a:	18db      	adds	r3, r3, r3
 8003e2c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e2e:	4613      	mov	r3, r2
 8003e30:	eb42 0303 	adc.w	r3, r2, r3
 8003e34:	657b      	str	r3, [r7, #84]	; 0x54
 8003e36:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e3a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003e3e:	f7fc f9d5 	bl	80001ec <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <UART_SetConfig+0x528>)
 8003e48:	fba3 1302 	umull	r1, r3, r3, r2
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	2164      	movs	r1, #100	; 0x64
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	3332      	adds	r3, #50	; 0x32
 8003e5a:	4a06      	ldr	r2, [pc, #24]	; (8003e74 <UART_SetConfig+0x528>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	f003 0207 	and.w	r2, r3, #7
 8003e66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4422      	add	r2, r4
 8003e6e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e70:	e232      	b.n	80042d8 <UART_SetConfig+0x98c>
 8003e72:	bf00      	nop
 8003e74:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b8d      	ldr	r3, [pc, #564]	; (80040b4 <UART_SetConfig+0x768>)
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d006      	beq.n	8003e92 <UART_SetConfig+0x546>
 8003e84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b8b      	ldr	r3, [pc, #556]	; (80040b8 <UART_SetConfig+0x76c>)
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	f040 8117 	bne.w	80040c0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e92:	f7ff f87b 	bl	8002f8c <HAL_RCC_GetPCLK2Freq>
 8003e96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003ea4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003ea8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003eac:	4622      	mov	r2, r4
 8003eae:	462b      	mov	r3, r5
 8003eb0:	1891      	adds	r1, r2, r2
 8003eb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003eb4:	415b      	adcs	r3, r3
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	eb12 0801 	adds.w	r8, r2, r1
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	eb43 0901 	adc.w	r9, r3, r1
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ed4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ed8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003edc:	4690      	mov	r8, r2
 8003ede:	4699      	mov	r9, r3
 8003ee0:	4623      	mov	r3, r4
 8003ee2:	eb18 0303 	adds.w	r3, r8, r3
 8003ee6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003eea:	462b      	mov	r3, r5
 8003eec:	eb49 0303 	adc.w	r3, r9, r3
 8003ef0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003ef4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f00:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8003f10:	4629      	mov	r1, r5
 8003f12:	008b      	lsls	r3, r1, #2
 8003f14:	4621      	mov	r1, r4
 8003f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	008a      	lsls	r2, r1, #2
 8003f1e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8003f22:	f7fc f963 	bl	80001ec <__aeabi_uldivmod>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4b64      	ldr	r3, [pc, #400]	; (80040bc <UART_SetConfig+0x770>)
 8003f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	011c      	lsls	r4, r3, #4
 8003f34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003f3e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003f42:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8003f46:	4642      	mov	r2, r8
 8003f48:	464b      	mov	r3, r9
 8003f4a:	1891      	adds	r1, r2, r2
 8003f4c:	6439      	str	r1, [r7, #64]	; 0x40
 8003f4e:	415b      	adcs	r3, r3
 8003f50:	647b      	str	r3, [r7, #68]	; 0x44
 8003f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f56:	4641      	mov	r1, r8
 8003f58:	1851      	adds	r1, r2, r1
 8003f5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	414b      	adcs	r3, r1
 8003f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8003f6e:	4659      	mov	r1, fp
 8003f70:	00cb      	lsls	r3, r1, #3
 8003f72:	4651      	mov	r1, sl
 8003f74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f78:	4651      	mov	r1, sl
 8003f7a:	00ca      	lsls	r2, r1, #3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4603      	mov	r3, r0
 8003f82:	4642      	mov	r2, r8
 8003f84:	189b      	adds	r3, r3, r2
 8003f86:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	460a      	mov	r2, r1
 8003f8e:	eb42 0303 	adc.w	r3, r2, r3
 8003f92:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003f96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003fa2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	008b      	lsls	r3, r1, #2
 8003fb6:	4641      	mov	r1, r8
 8003fb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	008a      	lsls	r2, r1, #2
 8003fc0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8003fc4:	f7fc f912 	bl	80001ec <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <UART_SetConfig+0x770>)
 8003fce:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	2164      	movs	r1, #100	; 0x64
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	3332      	adds	r3, #50	; 0x32
 8003fe0:	4a36      	ldr	r2, [pc, #216]	; (80040bc <UART_SetConfig+0x770>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fec:	441c      	add	r4, r3
 8003fee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003ff8:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8003ffc:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004000:	4642      	mov	r2, r8
 8004002:	464b      	mov	r3, r9
 8004004:	1891      	adds	r1, r2, r2
 8004006:	6339      	str	r1, [r7, #48]	; 0x30
 8004008:	415b      	adcs	r3, r3
 800400a:	637b      	str	r3, [r7, #52]	; 0x34
 800400c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004010:	4641      	mov	r1, r8
 8004012:	1851      	adds	r1, r2, r1
 8004014:	62b9      	str	r1, [r7, #40]	; 0x28
 8004016:	4649      	mov	r1, r9
 8004018:	414b      	adcs	r3, r1
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004028:	4659      	mov	r1, fp
 800402a:	00cb      	lsls	r3, r1, #3
 800402c:	4651      	mov	r1, sl
 800402e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004032:	4651      	mov	r1, sl
 8004034:	00ca      	lsls	r2, r1, #3
 8004036:	4610      	mov	r0, r2
 8004038:	4619      	mov	r1, r3
 800403a:	4603      	mov	r3, r0
 800403c:	4642      	mov	r2, r8
 800403e:	189b      	adds	r3, r3, r2
 8004040:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004044:	464b      	mov	r3, r9
 8004046:	460a      	mov	r2, r1
 8004048:	eb42 0303 	adc.w	r3, r2, r3
 800404c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004050:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800405c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800406c:	4649      	mov	r1, r9
 800406e:	008b      	lsls	r3, r1, #2
 8004070:	4641      	mov	r1, r8
 8004072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004076:	4641      	mov	r1, r8
 8004078:	008a      	lsls	r2, r1, #2
 800407a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800407e:	f7fc f8b5 	bl	80001ec <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <UART_SetConfig+0x770>)
 8004088:	fba3 1302 	umull	r1, r3, r3, r2
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	2164      	movs	r1, #100	; 0x64
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	3332      	adds	r3, #50	; 0x32
 800409a:	4a08      	ldr	r2, [pc, #32]	; (80040bc <UART_SetConfig+0x770>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	f003 020f 	and.w	r2, r3, #15
 80040a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4422      	add	r2, r4
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	e112      	b.n	80042d8 <UART_SetConfig+0x98c>
 80040b2:	bf00      	nop
 80040b4:	40011000 	.word	0x40011000
 80040b8:	40011400 	.word	0x40011400
 80040bc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7fe ff50 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 80040c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040cc:	2200      	movs	r2, #0
 80040ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80040d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80040d6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80040da:	4642      	mov	r2, r8
 80040dc:	464b      	mov	r3, r9
 80040de:	1891      	adds	r1, r2, r2
 80040e0:	6239      	str	r1, [r7, #32]
 80040e2:	415b      	adcs	r3, r3
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
 80040e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040ea:	4641      	mov	r1, r8
 80040ec:	1854      	adds	r4, r2, r1
 80040ee:	4649      	mov	r1, r9
 80040f0:	eb43 0501 	adc.w	r5, r3, r1
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	00eb      	lsls	r3, r5, #3
 80040fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004102:	00e2      	lsls	r2, r4, #3
 8004104:	4614      	mov	r4, r2
 8004106:	461d      	mov	r5, r3
 8004108:	4643      	mov	r3, r8
 800410a:	18e3      	adds	r3, r4, r3
 800410c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004110:	464b      	mov	r3, r9
 8004112:	eb45 0303 	adc.w	r3, r5, r3
 8004116:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800411a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004126:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004136:	4629      	mov	r1, r5
 8004138:	008b      	lsls	r3, r1, #2
 800413a:	4621      	mov	r1, r4
 800413c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004140:	4621      	mov	r1, r4
 8004142:	008a      	lsls	r2, r1, #2
 8004144:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004148:	f7fc f850 	bl	80001ec <__aeabi_uldivmod>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4b64      	ldr	r3, [pc, #400]	; (80042e4 <UART_SetConfig+0x998>)
 8004152:	fba3 2302 	umull	r2, r3, r3, r2
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	011c      	lsls	r4, r3, #4
 800415a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800415e:	2200      	movs	r2, #0
 8004160:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004164:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004168:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800416c:	4642      	mov	r2, r8
 800416e:	464b      	mov	r3, r9
 8004170:	1891      	adds	r1, r2, r2
 8004172:	61b9      	str	r1, [r7, #24]
 8004174:	415b      	adcs	r3, r3
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800417c:	4641      	mov	r1, r8
 800417e:	1851      	adds	r1, r2, r1
 8004180:	6139      	str	r1, [r7, #16]
 8004182:	4649      	mov	r1, r9
 8004184:	414b      	adcs	r3, r1
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004194:	4659      	mov	r1, fp
 8004196:	00cb      	lsls	r3, r1, #3
 8004198:	4651      	mov	r1, sl
 800419a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800419e:	4651      	mov	r1, sl
 80041a0:	00ca      	lsls	r2, r1, #3
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	4642      	mov	r2, r8
 80041aa:	189b      	adds	r3, r3, r2
 80041ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80041b0:	464b      	mov	r3, r9
 80041b2:	460a      	mov	r2, r1
 80041b4:	eb42 0303 	adc.w	r3, r2, r3
 80041b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80041bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041c8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80041d8:	4649      	mov	r1, r9
 80041da:	008b      	lsls	r3, r1, #2
 80041dc:	4641      	mov	r1, r8
 80041de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e2:	4641      	mov	r1, r8
 80041e4:	008a      	lsls	r2, r1, #2
 80041e6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80041ea:	f7fb ffff 	bl	80001ec <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4b3c      	ldr	r3, [pc, #240]	; (80042e4 <UART_SetConfig+0x998>)
 80041f4:	fba3 1302 	umull	r1, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	2164      	movs	r1, #100	; 0x64
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	3332      	adds	r3, #50	; 0x32
 8004206:	4a37      	ldr	r2, [pc, #220]	; (80042e4 <UART_SetConfig+0x998>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004212:	441c      	add	r4, r3
 8004214:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800421e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004222:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004226:	4642      	mov	r2, r8
 8004228:	464b      	mov	r3, r9
 800422a:	1891      	adds	r1, r2, r2
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	415b      	adcs	r3, r3
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004236:	4641      	mov	r1, r8
 8004238:	1851      	adds	r1, r2, r1
 800423a:	6039      	str	r1, [r7, #0]
 800423c:	4649      	mov	r1, r9
 800423e:	414b      	adcs	r3, r1
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800424e:	4659      	mov	r1, fp
 8004250:	00cb      	lsls	r3, r1, #3
 8004252:	4651      	mov	r1, sl
 8004254:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004258:	4651      	mov	r1, sl
 800425a:	00ca      	lsls	r2, r1, #3
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	4603      	mov	r3, r0
 8004262:	4642      	mov	r2, r8
 8004264:	189b      	adds	r3, r3, r2
 8004266:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800426a:	464b      	mov	r3, r9
 800426c:	460a      	mov	r2, r1
 800426e:	eb42 0303 	adc.w	r3, r2, r3
 8004272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004276:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004282:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004292:	4649      	mov	r1, r9
 8004294:	008b      	lsls	r3, r1, #2
 8004296:	4641      	mov	r1, r8
 8004298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800429c:	4641      	mov	r1, r8
 800429e:	008a      	lsls	r2, r1, #2
 80042a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042a4:	f7fb ffa2 	bl	80001ec <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <UART_SetConfig+0x998>)
 80042ae:	fba3 1302 	umull	r1, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2164      	movs	r1, #100	; 0x64
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	3332      	adds	r3, #50	; 0x32
 80042c0:	4a08      	ldr	r2, [pc, #32]	; (80042e4 <UART_SetConfig+0x998>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4422      	add	r2, r4
 80042d4:	609a      	str	r2, [r3, #8]
}
 80042d6:	e7ff      	b.n	80042d8 <UART_SetConfig+0x98c>
 80042d8:	bf00      	nop
 80042da:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80042de:	46bd      	mov	sp, r7
 80042e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e4:	51eb851f 	.word	0x51eb851f

080042e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d029      	beq.n	8004356 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800430e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004312:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800431c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8004322:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8004328:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800432e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8004334:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800433a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8004340:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8004346:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	e034      	b.n	80043c0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004362:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800436c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004372:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004386:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800438a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004394:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800439a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80043a0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80043a6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80043ac:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b087      	sub	sp, #28
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d02e      	beq.n	8004446 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043f4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	3b01      	subs	r3, #1
 8004402:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004404:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	3b01      	subs	r3, #1
 800440c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800440e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	3b01      	subs	r3, #1
 8004416:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004418:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	3b01      	subs	r3, #1
 8004420:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004422:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	3b01      	subs	r3, #1
 800442a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800442c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	3b01      	subs	r3, #1
 8004434:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004436:	4313      	orrs	r3, r2
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	e03b      	b.n	80044be <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004452:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004456:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	3b01      	subs	r3, #1
 800445e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	3b01      	subs	r3, #1
 8004466:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004468:	4313      	orrs	r3, r2
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800447c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	3b01      	subs	r3, #1
 800448a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800448c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	3b01      	subs	r3, #1
 8004494:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004496:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	3b01      	subs	r3, #1
 800449e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80044a0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80044aa:	4313      	orrs	r3, r2
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80044e8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80044f2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004504:	f7fc ffae 	bl	8001464 <HAL_GetTick>
 8004508:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800450a:	e010      	b.n	800452e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d00c      	beq.n	800452e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <FMC_SDRAM_SendCommand+0x5e>
 800451a:	f7fc ffa3 	bl	8001464 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d201      	bcs.n	800452e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e006      	b.n	800453c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b20      	cmp	r3, #32
 8004538:	d0e8      	beq.n	800450c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <__libc_init_array>:
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	4d0d      	ldr	r5, [pc, #52]	; (80045a4 <__libc_init_array+0x38>)
 8004570:	4c0d      	ldr	r4, [pc, #52]	; (80045a8 <__libc_init_array+0x3c>)
 8004572:	1b64      	subs	r4, r4, r5
 8004574:	10a4      	asrs	r4, r4, #2
 8004576:	2600      	movs	r6, #0
 8004578:	42a6      	cmp	r6, r4
 800457a:	d109      	bne.n	8004590 <__libc_init_array+0x24>
 800457c:	4d0b      	ldr	r5, [pc, #44]	; (80045ac <__libc_init_array+0x40>)
 800457e:	4c0c      	ldr	r4, [pc, #48]	; (80045b0 <__libc_init_array+0x44>)
 8004580:	f000 f820 	bl	80045c4 <_init>
 8004584:	1b64      	subs	r4, r4, r5
 8004586:	10a4      	asrs	r4, r4, #2
 8004588:	2600      	movs	r6, #0
 800458a:	42a6      	cmp	r6, r4
 800458c:	d105      	bne.n	800459a <__libc_init_array+0x2e>
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	f855 3b04 	ldr.w	r3, [r5], #4
 8004594:	4798      	blx	r3
 8004596:	3601      	adds	r6, #1
 8004598:	e7ee      	b.n	8004578 <__libc_init_array+0xc>
 800459a:	f855 3b04 	ldr.w	r3, [r5], #4
 800459e:	4798      	blx	r3
 80045a0:	3601      	adds	r6, #1
 80045a2:	e7f2      	b.n	800458a <__libc_init_array+0x1e>
 80045a4:	080045fc 	.word	0x080045fc
 80045a8:	080045fc 	.word	0x080045fc
 80045ac:	080045fc 	.word	0x080045fc
 80045b0:	08004600 	.word	0x08004600

080045b4 <memset>:
 80045b4:	4402      	add	r2, r0
 80045b6:	4603      	mov	r3, r0
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d100      	bne.n	80045be <memset+0xa>
 80045bc:	4770      	bx	lr
 80045be:	f803 1b01 	strb.w	r1, [r3], #1
 80045c2:	e7f9      	b.n	80045b8 <memset+0x4>

080045c4 <_init>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr

080045d0 <_fini>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	bf00      	nop
 80045d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d6:	bc08      	pop	{r3}
 80045d8:	469e      	mov	lr, r3
 80045da:	4770      	bx	lr
