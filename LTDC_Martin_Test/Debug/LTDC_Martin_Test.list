
LTDC_Martin_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004488  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800464c  0800464c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800464c  0800464c  0001464c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004654  08004654  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800465c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001cc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  200001d8  200001d8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010921  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf2  00000000  00000000  0003095d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00033650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00034388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246b7  00000000  00000000  00034f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118fd  00000000  00000000  0005962f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5fb0  00000000  00000000  0006af2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140edc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003470  00000000  00000000  00140f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800461c 	.word	0x0800461c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800461c 	.word	0x0800461c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af02      	add	r7, sp, #8
  /* Initialize the SDRAM */
  SDRAM_Init();
 80004f6:	f000 fdcd 	bl	8001094 <SDRAM_Init>
	BSP_LCD_SelectLayer(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f000 f83e 	bl	800057c <BSP_LCD_SelectLayer>
  /* Clear the LCD Foreground layer */
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8000500:	2100      	movs	r1, #0
 8000502:	2001      	movs	r0, #1
 8000504:	f000 f84a 	bl	800059c <BSP_LCD_SetLayerVisible>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8000508:	2000      	movs	r0, #0
 800050a:	f000 f837 	bl	800057c <BSP_LCD_SelectLayer>
  BSP_LCD_SetLayerWindow(0,0,0,LCD_WIDTH,LCD_HEIGHT);
 800050e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	2000      	movs	r0, #0
 800051e:	f000 f87b 	bl	8000618 <BSP_LCD_SetLayerWindow>


  return LCD_OK;
 8000522:	2300      	movs	r3, #0
}
 8000524:	4618      	mov	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <BSP_LCD_GetXSize+0x20>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a06      	ldr	r2, [pc, #24]	; (8000550 <BSP_LCD_GetXSize+0x24>)
 8000536:	2134      	movs	r1, #52	; 0x34
 8000538:	fb01 f303 	mul.w	r3, r1, r3
 800053c:	4413      	add	r3, r2
 800053e:	3360      	adds	r3, #96	; 0x60
 8000540:	681b      	ldr	r3, [r3, #0]
}
 8000542:	4618      	mov	r0, r3
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	20000028 	.word	0x20000028
 8000550:	200000a4 	.word	0x200000a4

08000554 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <BSP_LCD_GetYSize+0x20>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <BSP_LCD_GetYSize+0x24>)
 800055e:	2134      	movs	r1, #52	; 0x34
 8000560:	fb01 f303 	mul.w	r3, r1, r3
 8000564:	4413      	add	r3, r2
 8000566:	3364      	adds	r3, #100	; 0x64
 8000568:	681b      	ldr	r3, [r3, #0]
}
 800056a:	4618      	mov	r0, r3
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	20000028 	.word	0x20000028
 8000578:	200000a4 	.word	0x200000a4

0800057c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <BSP_LCD_SelectLayer+0x1c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000028 	.word	0x20000028

0800059c <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 80005a8:	78fb      	ldrb	r3, [r7, #3]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d112      	bne.n	80005d4 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <BSP_LCD_SetLayerVisible+0x78>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	01db      	lsls	r3, r3, #7
 80005b8:	4413      	add	r3, r2
 80005ba:	3384      	adds	r3, #132	; 0x84
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <BSP_LCD_SetLayerVisible+0x78>)
 80005c0:	6812      	ldr	r2, [r2, #0]
 80005c2:	4611      	mov	r1, r2
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	01d2      	lsls	r2, r2, #7
 80005c8:	440a      	add	r2, r1
 80005ca:	3284      	adds	r2, #132	; 0x84
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	e011      	b.n	80005f8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <BSP_LCD_SetLayerVisible+0x78>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	01db      	lsls	r3, r3, #7
 80005de:	4413      	add	r3, r2
 80005e0:	3384      	adds	r3, #132	; 0x84
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <BSP_LCD_SetLayerVisible+0x78>)
 80005e6:	6812      	ldr	r2, [r2, #0]
 80005e8:	4611      	mov	r1, r2
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	01d2      	lsls	r2, r2, #7
 80005ee:	440a      	add	r2, r1
 80005f0:	3284      	adds	r2, #132	; 0x84
 80005f2:	f023 0301 	bic.w	r3, r3, #1
 80005f6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <BSP_LCD_SetLayerVisible+0x78>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <BSP_LCD_SetLayerVisible+0x78>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f042 0201 	orr.w	r2, r2, #1
 8000606:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	200000a4 	.word	0x200000a4

08000618 <BSP_LCD_SetLayerWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height
  * @retval None
  */
void BSP_LCD_SetLayerWindow(uint16_t LayerIndex, uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4604      	mov	r4, r0
 8000620:	4608      	mov	r0, r1
 8000622:	4611      	mov	r1, r2
 8000624:	461a      	mov	r2, r3
 8000626:	4623      	mov	r3, r4
 8000628:	80fb      	strh	r3, [r7, #6]
 800062a:	4603      	mov	r3, r0
 800062c:	80bb      	strh	r3, [r7, #4]
 800062e:	460b      	mov	r3, r1
 8000630:	807b      	strh	r3, [r7, #2]
 8000632:	4613      	mov	r3, r2
 8000634:	803b      	strh	r3, [r7, #0]
  /* Reconfigure the layer size */
  HAL_LTDC_SetWindowSize(&hLtdcHandler, Width, Height, LayerIndex);
 8000636:	8839      	ldrh	r1, [r7, #0]
 8000638:	8b3a      	ldrh	r2, [r7, #24]
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <BSP_LCD_SetLayerWindow+0x40>)
 800063e:	f001 fe77 	bl	8002330 <HAL_LTDC_SetWindowSize>

  /* Reconfigure the layer position */
  HAL_LTDC_SetWindowPosition(&hLtdcHandler, Xpos, Ypos, LayerIndex);
 8000642:	88b9      	ldrh	r1, [r7, #4]
 8000644:	887a      	ldrh	r2, [r7, #2]
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <BSP_LCD_SetLayerWindow+0x40>)
 800064a:	f001 feb7 	bl	80023bc <HAL_LTDC_SetWindowPosition>
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bd90      	pop	{r4, r7, pc}
 8000656:	bf00      	nop
 8000658:	200000a4 	.word	0x200000a4

0800065c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800065c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065e:	b085      	sub	sp, #20
 8000660:	af02      	add	r7, sp, #8
 8000662:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <BSP_LCD_Clear+0x48>)
 8000666:	681c      	ldr	r4, [r3, #0]
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <BSP_LCD_Clear+0x48>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <BSP_LCD_Clear+0x4c>)
 800066e:	2134      	movs	r1, #52	; 0x34
 8000670:	fb01 f303 	mul.w	r3, r1, r3
 8000674:	4413      	add	r3, r2
 8000676:	335c      	adds	r3, #92	; 0x5c
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	461e      	mov	r6, r3
 800067c:	f7ff ff56 	bl	800052c <BSP_LCD_GetXSize>
 8000680:	4605      	mov	r5, r0
 8000682:	f7ff ff67 	bl	8000554 <BSP_LCD_GetYSize>
 8000686:	4602      	mov	r2, r0
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	2300      	movs	r3, #0
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	4613      	mov	r3, r2
 8000692:	462a      	mov	r2, r5
 8000694:	4631      	mov	r1, r6
 8000696:	4620      	mov	r0, r4
 8000698:	f000 f808 	bl	80006ac <LL_FillBuffer>
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a4:	20000028 	.word	0x20000028
 80006a8:	200000a4 	.word	0x200000a4

080006ac <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <LL_FillBuffer+0xa4>)
 80006bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006c0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <LL_FillBuffer+0xa8>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a24      	ldr	r2, [pc, #144]	; (8000758 <LL_FillBuffer+0xac>)
 80006c8:	2134      	movs	r1, #52	; 0x34
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	4413      	add	r3, r2
 80006d0:	3348      	adds	r3, #72	; 0x48
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d111      	bne.n	80006fc <LL_FillBuffer+0x50>
  { /* RGB565 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <LL_FillBuffer+0xa4>)
 80006da:	2202      	movs	r2, #2
 80006dc:	609a      	str	r2, [r3, #8]
		ColorIndex = ((ColorIndex & LCD_COLOR_RED)<<8) | ((ColorIndex & LCD_COLOR_GREEN )<<5) | ((ColorIndex & LCD_COLOR_BLUE) << 3);
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	f403 0278 	and.w	r2, r3, #16252928	; 0xf80000
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	015b      	lsls	r3, r3, #5
 80006ea:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80006ee:	431a      	orrs	r2, r3
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4313      	orrs	r3, r2
 80006f8:	61fb      	str	r3, [r7, #28]
 80006fa:	e002      	b.n	8000702 <LL_FillBuffer+0x56>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <LL_FillBuffer+0xa4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <LL_FillBuffer+0xa4>)
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	60d3      	str	r3, [r2, #12]

  hDma2dHandler.Instance = DMA2D;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <LL_FillBuffer+0xa4>)
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <LL_FillBuffer+0xb0>)
 800070c:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK)
 800070e:	4810      	ldr	r0, [pc, #64]	; (8000750 <LL_FillBuffer+0xa4>)
 8000710:	f001 f88b 	bl	800182a <HAL_DMA2D_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d115      	bne.n	8000746 <LL_FillBuffer+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK)
 800071a:	68f9      	ldr	r1, [r7, #12]
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <LL_FillBuffer+0xa4>)
 800071e:	f001 f9e1 	bl	8001ae4 <HAL_DMA2D_ConfigLayer>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d10e      	bne.n	8000746 <LL_FillBuffer+0x9a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	69f9      	ldr	r1, [r7, #28]
 8000732:	4807      	ldr	r0, [pc, #28]	; (8000750 <LL_FillBuffer+0xa4>)
 8000734:	f001 f8c2 	bl	80018bc <HAL_DMA2D_Start>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d103      	bne.n	8000746 <LL_FillBuffer+0x9a>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800073e:	210a      	movs	r1, #10
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <LL_FillBuffer+0xa4>)
 8000742:	f001 f8e6 	bl	8001912 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000002c 	.word	0x2000002c
 8000754:	20000028 	.word	0x20000028
 8000758:	200000a4 	.word	0x200000a4
 800075c:	4002b000 	.word	0x4002b000

08000760 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_DMA2D_Init+0x34>)
 8000766:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <MX_DMA2D_Init+0x38>)
 8000768:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_DMA2D_Init+0x34>)
 800076c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000770:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_DMA2D_Init+0x34>)
 8000774:	2202      	movs	r2, #2
 8000776:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_DMA2D_Init+0x34>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_DMA2D_Init+0x34>)
 8000780:	f001 f853 	bl	800182a <HAL_DMA2D_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 800078a:	f000 fc7b 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000002c 	.word	0x2000002c
 8000798:	4002b000 	.word	0x4002b000

0800079c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <HAL_DMA2D_MspInit+0x3c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d10d      	bne.n	80007ca <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_DMA2D_MspInit+0x40>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a09      	ldr	r2, [pc, #36]	; (80007dc <HAL_DMA2D_MspInit+0x40>)
 80007b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <HAL_DMA2D_MspInit+0x40>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	4002b000 	.word	0x4002b000
 80007dc:	40023800 	.word	0x40023800

080007e0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	615a      	str	r2, [r3, #20]
 80007f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_FMC_Init+0x98>)
 80007fa:	4a20      	ldr	r2, [pc, #128]	; (800087c <MX_FMC_Init+0x9c>)
 80007fc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_FMC_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_FMC_Init+0x98>)
 8000806:	2201      	movs	r2, #1
 8000808:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_FMC_Init+0x98>)
 800080c:	2208      	movs	r2, #8
 800080e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_FMC_Init+0x98>)
 8000812:	2210      	movs	r2, #16
 8000814:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_FMC_Init+0x98>)
 8000818:	2240      	movs	r2, #64	; 0x40
 800081a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_FMC_Init+0x98>)
 800081e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000822:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_FMC_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_FMC_Init+0x98>)
 800082c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000830:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_FMC_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_FMC_Init+0x98>)
 800083a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8000844:	2308      	movs	r3, #8
 8000846:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8000848:	2306      	movs	r3, #6
 800084a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800084c:	2306      	movs	r3, #6
 800084e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_FMC_Init+0x98>)
 8000862:	f002 fdf1 	bl	8003448 <HAL_SDRAM_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800086c:	f000 fc0a 	bl	8001084 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000006c 	.word	0x2000006c
 800087c:	a0000140 	.word	0xa0000140

08000880 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000894:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <HAL_FMC_MspInit+0x104>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d16f      	bne.n	800097c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800089c:	4b39      	ldr	r3, [pc, #228]	; (8000984 <HAL_FMC_MspInit+0x104>)
 800089e:	2201      	movs	r2, #1
 80008a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <HAL_FMC_MspInit+0x108>)
 80008a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008aa:	4a37      	ldr	r2, [pc, #220]	; (8000988 <HAL_FMC_MspInit+0x108>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6393      	str	r3, [r2, #56]	; 0x38
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <HAL_FMC_MspInit+0x108>)
 80008b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008be:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008d0:	230c      	movs	r3, #12
 80008d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	482c      	ldr	r0, [pc, #176]	; (800098c <HAL_FMC_MspInit+0x10c>)
 80008da:	f001 fa31 	bl	8001d40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80008de:	230d      	movs	r3, #13
 80008e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ee:	230c      	movs	r3, #12
 80008f0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4826      	ldr	r0, [pc, #152]	; (8000990 <HAL_FMC_MspInit+0x110>)
 80008f8:	f001 fa22 	bl	8001d40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80008fc:	f248 1337 	movw	r3, #33079	; 0x8137
 8000900:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000906:	2301      	movs	r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800090e:	230c      	movs	r3, #12
 8000910:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4619      	mov	r1, r3
 8000916:	481f      	ldr	r0, [pc, #124]	; (8000994 <HAL_FMC_MspInit+0x114>)
 8000918:	f001 fa12 	bl	8001d40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800091c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000920:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000926:	2301      	movs	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800092e:	230c      	movs	r3, #12
 8000930:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4619      	mov	r1, r3
 8000936:	4818      	ldr	r0, [pc, #96]	; (8000998 <HAL_FMC_MspInit+0x118>)
 8000938:	f001 fa02 	bl	8001d40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800093c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000940:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000946:	2301      	movs	r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800094e:	230c      	movs	r3, #12
 8000950:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4619      	mov	r1, r3
 8000956:	4811      	ldr	r0, [pc, #68]	; (800099c <HAL_FMC_MspInit+0x11c>)
 8000958:	f001 f9f2 	bl	8001d40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800095c:	2303      	movs	r3, #3
 800095e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800096c:	230c      	movs	r3, #12
 800096e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	4808      	ldr	r0, [pc, #32]	; (8000998 <HAL_FMC_MspInit+0x118>)
 8000976:	f001 f9e3 	bl	8001d40 <HAL_GPIO_Init>
 800097a:	e000      	b.n	800097e <HAL_FMC_MspInit+0xfe>
    return;
 800097c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000a0 	.word	0x200000a0
 8000988:	40023800 	.word	0x40023800
 800098c:	40021400 	.word	0x40021400
 8000990:	40020800 	.word	0x40020800
 8000994:	40021800 	.word	0x40021800
 8000998:	40021000 	.word	0x40021000
 800099c:	40020c00 	.word	0x40020c00

080009a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80009a8:	f7ff ff6a 	bl	8000880 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08e      	sub	sp, #56	; 0x38
 80009b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
 80009ce:	4b78      	ldr	r3, [pc, #480]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a77      	ldr	r2, [pc, #476]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 80009d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b75      	ldr	r3, [pc, #468]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009e2:	623b      	str	r3, [r7, #32]
 80009e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
 80009ea:	4b71      	ldr	r3, [pc, #452]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a70      	ldr	r2, [pc, #448]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 80009f0:	f043 0320 	orr.w	r3, r3, #32
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b6e      	ldr	r3, [pc, #440]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0320 	and.w	r3, r3, #32
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	4b6a      	ldr	r3, [pc, #424]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a69      	ldr	r2, [pc, #420]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b67      	ldr	r3, [pc, #412]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	4b63      	ldr	r3, [pc, #396]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a62      	ldr	r2, [pc, #392]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b5c      	ldr	r3, [pc, #368]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a5b      	ldr	r2, [pc, #364]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b59      	ldr	r3, [pc, #356]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b55      	ldr	r3, [pc, #340]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a54      	ldr	r2, [pc, #336]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b52      	ldr	r3, [pc, #328]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a4d      	ldr	r2, [pc, #308]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a7c:	f043 0310 	orr.w	r3, r3, #16
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b47      	ldr	r3, [pc, #284]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a46      	ldr	r2, [pc, #280]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b44      	ldr	r3, [pc, #272]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a3f      	ldr	r2, [pc, #252]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <MX_GPIO_Init+0x1fc>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, RST_Pin|SDA_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000acc:	4839      	ldr	r0, [pc, #228]	; (8000bb4 <MX_GPIO_Init+0x200>)
 8000ace:	f001 fae3 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	4838      	ldr	r0, [pc, #224]	; (8000bb8 <MX_GPIO_Init+0x204>)
 8000ad8:	f001 fade 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2140      	movs	r1, #64	; 0x40
 8000ae0:	4836      	ldr	r0, [pc, #216]	; (8000bbc <MX_GPIO_Init+0x208>)
 8000ae2:	f001 fad9 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2120      	movs	r1, #32
 8000aea:	4833      	ldr	r0, [pc, #204]	; (8000bb8 <MX_GPIO_Init+0x204>)
 8000aec:	f001 fad4 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	482a      	ldr	r0, [pc, #168]	; (8000bb4 <MX_GPIO_Init+0x200>)
 8000b0a:	f001 f919 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4824      	ldr	r0, [pc, #144]	; (8000bb8 <MX_GPIO_Init+0x204>)
 8000b26:	f001 f90b 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SCL_Pin;
 8000b2a:	2340      	movs	r3, #64	; 0x40
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	481e      	ldr	r0, [pc, #120]	; (8000bbc <MX_GPIO_Init+0x208>)
 8000b42:	f001 f8fd 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4818      	ldr	r0, [pc, #96]	; (8000bbc <MX_GPIO_Init+0x208>)
 8000b5c:	f001 f8f0 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDA_Pin;
 8000b60:	2308      	movs	r3, #8
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <MX_GPIO_Init+0x200>)
 8000b78:	f001 f8e2 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	4619      	mov	r1, r3
 8000b92:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <MX_GPIO_Init+0x204>)
 8000b94:	f001 f8d4 	bl	8001d40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2017      	movs	r0, #23
 8000b9e:	f000 fd7c 	bl	800169a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ba2:	2017      	movs	r0, #23
 8000ba4:	f000 fd95 	bl	80016d2 <HAL_NVIC_EnableIRQ>

}
 8000ba8:	bf00      	nop
 8000baa:	3738      	adds	r7, #56	; 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40022000 	.word	0x40022000
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40021c00 	.word	0x40021c00

08000bc0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b09a      	sub	sp, #104	; 0x68
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bca:	2234      	movs	r2, #52	; 0x34
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 fd1c 	bl	800460c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2234      	movs	r2, #52	; 0x34
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 fd16 	bl	800460c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000be0:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000be2:	4a54      	ldr	r2, [pc, #336]	; (8000d34 <MX_LTDC_Init+0x174>)
 8000be4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000be6:	4b52      	ldr	r3, [pc, #328]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bec:	4b50      	ldr	r3, [pc, #320]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bf2:	4b4f      	ldr	r3, [pc, #316]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bf8:	4b4d      	ldr	r3, [pc, #308]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 47;
 8000bfe:	4b4c      	ldr	r3, [pc, #304]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000c00:	222f      	movs	r2, #47	; 0x2f
 8000c02:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 2;
 8000c04:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000c06:	2202      	movs	r2, #2
 8000c08:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 135;
 8000c0a:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000c0c:	2287      	movs	r2, #135	; 0x87
 8000c0e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 34;
 8000c10:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000c12:	2222      	movs	r2, #34	; 0x22
 8000c14:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 935;
 8000c16:	4b46      	ldr	r3, [pc, #280]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000c18:	f240 32a7 	movw	r2, #935	; 0x3a7
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 514;
 8000c1e:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000c20:	f240 2202 	movw	r2, #514	; 0x202
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 975;
 8000c26:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000c28:	f240 32cf 	movw	r2, #975	; 0x3cf
 8000c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 527;
 8000c2e:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000c30:	f240 220f 	movw	r2, #527	; 0x20f
 8000c34:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c36:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c3e:	4b3c      	ldr	r3, [pc, #240]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c46:	4b3a      	ldr	r3, [pc, #232]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c4e:	4838      	ldr	r0, [pc, #224]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000c50:	f001 fa60 	bl	8002114 <HAL_LTDC_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000c5a:	f000 fa13 	bl	8001084 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 1024;
 8000c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c66:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 600;
 8000c6c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000c70:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c72:	2302      	movs	r3, #2
 8000c74:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000c76:	23ff      	movs	r3, #255	; 0xff
 8000c78:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c82:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c84:	2305      	movs	r3, #5
 8000c86:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c88:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000c8c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 1024;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c92:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 600;
 8000c94:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000c98:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481e      	ldr	r0, [pc, #120]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000cb6:	f001 fafd 	bl	80022b4 <HAL_LTDC_ConfigLayer>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000cc0:	f000 f9e0 	bl	8001084 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 1024;
 8000cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ccc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 600;
 8000cd2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000cd6:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce8:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cea:	2305      	movs	r3, #5
 8000cec:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0xC0200000;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_LTDC_Init+0x178>)
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 1024;
 8000cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 600;
 8000cf8:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	2201      	movs	r2, #1
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_LTDC_Init+0x170>)
 8000d18:	f001 facc 	bl	80022b4 <HAL_LTDC_ConfigLayer>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_LTDC_Init+0x166>
  {
    Error_Handler();
 8000d22:	f000 f9af 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3768      	adds	r7, #104	; 0x68
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000a4 	.word	0x200000a4
 8000d34:	40016800 	.word	0x40016800
 8000d38:	c0200000 	.word	0xc0200000

08000d3c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b098      	sub	sp, #96	; 0x60
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	2230      	movs	r2, #48	; 0x30
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fc55 	bl	800460c <memset>
  if(ltdcHandle->Instance==LTDC)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a52      	ldr	r2, [pc, #328]	; (8000eb0 <HAL_LTDC_MspInit+0x174>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	f040 809c 	bne.w	8000ea6 <HAL_LTDC_MspInit+0x16a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 152;
 8000d72:	2398      	movs	r3, #152	; 0x98
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 f9a0 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000d8e:	f000 f979 	bl	8001084 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	4b47      	ldr	r3, [pc, #284]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a46      	ldr	r2, [pc, #280]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000d9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b44      	ldr	r3, [pc, #272]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	4b40      	ldr	r3, [pc, #256]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b3d      	ldr	r3, [pc, #244]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a38      	ldr	r2, [pc, #224]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b36      	ldr	r3, [pc, #216]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0320 	and.w	r3, r3, #32
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a31      	ldr	r2, [pc, #196]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a2a      	ldr	r2, [pc, #168]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <HAL_LTDC_MspInit+0x178>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8000e1e:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e30:	230e      	movs	r3, #14
 8000e32:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	481f      	ldr	r0, [pc, #124]	; (8000eb8 <HAL_LTDC_MspInit+0x17c>)
 8000e3c:	f000 ff80 	bl	8001d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e44:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e52:	230e      	movs	r3, #14
 8000e54:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4817      	ldr	r0, [pc, #92]	; (8000ebc <HAL_LTDC_MspInit+0x180>)
 8000e5e:	f000 ff6f 	bl	8001d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000e62:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e74:	230e      	movs	r3, #14
 8000e76:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <HAL_LTDC_MspInit+0x184>)
 8000e80:	f000 ff5e 	bl	8001d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000e84:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000e88:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e96:	230e      	movs	r3, #14
 8000e98:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <HAL_LTDC_MspInit+0x188>)
 8000ea2:	f000 ff4d 	bl	8001d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3760      	adds	r7, #96	; 0x60
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40016800 	.word	0x40016800
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40022000 	.word	0x40022000
 8000ebc:	40021400 	.word	0x40021400
 8000ec0:	40021c00 	.word	0x40021c00
 8000ec4:	40021800 	.word	0x40021800

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f000 fa73 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f865 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f7ff fd6d 	bl	80009b4 <MX_GPIO_Init>
  MX_LTDC_Init();
 8000eda:	f7ff fe71 	bl	8000bc0 <MX_LTDC_Init>
  MX_FMC_Init();
 8000ede:	f7ff fc7f 	bl	80007e0 <MX_FMC_Init>
  MX_USART1_UART_Init();
 8000ee2:	f000 f9c5 	bl	8001270 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8000ee6:	f7ff fc3b 	bl	8000760 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000eea:	f7ff fb01 	bl	80004f0 <BSP_LCD_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2120      	movs	r1, #32
 8000ef2:	4829      	ldr	r0, [pc, #164]	; (8000f98 <main+0xd0>)
 8000ef4:	f001 f8d0 	bl	8002098 <HAL_GPIO_WritePin>
  for(int i = 0; i < 10; i++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e012      	b.n	8000f24 <main+0x5c>
  {
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2102      	movs	r1, #2
 8000f02:	4825      	ldr	r0, [pc, #148]	; (8000f98 <main+0xd0>)
 8000f04:	f001 f8c8 	bl	8002098 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000f08:	2064      	movs	r0, #100	; 0x64
 8000f0a:	f000 fac7 	bl	800149c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2102      	movs	r1, #2
 8000f12:	4821      	ldr	r0, [pc, #132]	; (8000f98 <main+0xd0>)
 8000f14:	f001 f8c0 	bl	8002098 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000f18:	2064      	movs	r0, #100	; 0x64
 8000f1a:	f000 fabf 	bl	800149c <HAL_Delay>
  for(int i = 0; i < 10; i++)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3301      	adds	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2b09      	cmp	r3, #9
 8000f28:	dde9      	ble.n	8000efe <main+0x36>
	}
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <main+0xd4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a1a      	ldr	r2, [pc, #104]	; (8000f9c <main+0xd4>)
 8000f34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <main+0xd4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000f46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f4a:	f7ff fb87 	bl	800065c <BSP_LCD_Clear>

  volatile uint32_t last_ticks = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  uint8_t LED = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	72fb      	strb	r3, [r7, #11]
  while (1)
  {
	  if (HAL_GetTick() - last_ticks >= 50){
 8000f56:	f000 fa95 	bl	8001484 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b31      	cmp	r3, #49	; 0x31
 8000f62:	d9f8      	bls.n	8000f56 <main+0x8e>
		  if(LED)
 8000f64:	7afb      	ldrb	r3, [r7, #11]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <main+0xae>
		  {
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	480a      	ldr	r0, [pc, #40]	; (8000f98 <main+0xd0>)
 8000f70:	f001 f892 	bl	8002098 <HAL_GPIO_WritePin>
 8000f74:	e004      	b.n	8000f80 <main+0xb8>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <main+0xd0>)
 8000f7c:	f001 f88c 	bl	8002098 <HAL_GPIO_WritePin>
		  }
		  LED = (++LED)%2;
 8000f80:	7afb      	ldrb	r3, [r7, #11]
 8000f82:	3301      	adds	r3, #1
 8000f84:	72fb      	strb	r3, [r7, #11]
 8000f86:	7afb      	ldrb	r3, [r7, #11]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	72fb      	strb	r3, [r7, #11]
		  last_ticks = HAL_GetTick();
 8000f8e:	f000 fa79 	bl	8001484 <HAL_GetTick>
 8000f92:	4603      	mov	r3, r0
 8000f94:	607b      	str	r3, [r7, #4]
	  if (HAL_GetTick() - last_ticks >= 50){
 8000f96:	e7de      	b.n	8000f56 <main+0x8e>
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fb2c 	bl	800460c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	; (800107c <SystemClock_Config+0xdc>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a2b      	ldr	r2, [pc, #172]	; (800107c <SystemClock_Config+0xdc>)
 8000fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <SystemClock_Config+0xdc>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <SystemClock_Config+0xe0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a25      	ldr	r2, [pc, #148]	; (8001080 <SystemClock_Config+0xe0>)
 8000fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <SystemClock_Config+0xe0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001010:	2319      	movs	r3, #25
 8001012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001014:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001018:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800101a:	2302      	movs	r3, #2
 800101c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800101e:	2308      	movs	r3, #8
 8001020:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fbf6 	bl	8002818 <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001032:	f000 f827 	bl	8001084 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001036:	f001 fb9f 	bl	8002778 <HAL_PWREx_EnableOverDrive>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001040:	f000 f820 	bl	8001084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001048:	2302      	movs	r3, #2
 800104a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001050:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2105      	movs	r1, #5
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fe50 	bl	8002d08 <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800106e:	f000 f809 	bl	8001084 <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3750      	adds	r7, #80	; 0x50
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40007000 	.word	0x40007000

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <SDRAM_Init>:

/******************************************************************************
function:	SDRAM device configuration
******************************************************************************/
void SDRAM_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <SDRAM_Init+0x18>)
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <SDRAM_Init+0x1c>)
 800109c:	601a      	str	r2, [r3, #0]
	SDRAM_Initialization_sequence(REFRESH_COUNT);
 800109e:	f240 6003 	movw	r0, #1539	; 0x603
 80010a2:	f000 f807 	bl	80010b4 <SDRAM_Initialization_sequence>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000014c 	.word	0x2000014c
 80010b0:	a0000140 	.word	0xa0000140

080010b4 <SDRAM_Initialization_sequence>:
function:	Programs the SDRAM device.
parameter:
	RefreshCount : SDRAM refresh counter value
******************************************************************************/
void SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80010c0:	4b2a      	ldr	r3, [pc, #168]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 80010c8:	2210      	movs	r2, #16
 80010ca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80010cc:	4b27      	ldr	r3, [pc, #156]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80010d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010dc:	4923      	ldr	r1, [pc, #140]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 80010de:	4824      	ldr	r0, [pc, #144]	; (8001170 <SDRAM_Initialization_sequence+0xbc>)
 80010e0:	f002 f9e6 	bl	80034b0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f000 f9d9 	bl	800149c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 80010f2:	2210      	movs	r2, #16
 80010f4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001106:	4919      	ldr	r1, [pc, #100]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <SDRAM_Initialization_sequence+0xbc>)
 800110a:	f002 f9d1 	bl	80034b0 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 8001110:	2203      	movs	r2, #3
 8001112:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 8001116:	2210      	movs	r2, #16
 8001118:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 800111c:	2208      	movs	r2, #8
 800111e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112a:	4910      	ldr	r1, [pc, #64]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 800112c:	4810      	ldr	r0, [pc, #64]	; (8001170 <SDRAM_Initialization_sequence+0xbc>)
 800112e:	f002 f9bf 	bl	80034b0 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001132:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001136:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 800113a:	2204      	movs	r2, #4
 800113c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 8001140:	2210      	movs	r2, #16
 8001142:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 8001146:	2201      	movs	r2, #1
 8001148:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 800114e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001154:	4905      	ldr	r1, [pc, #20]	; (800116c <SDRAM_Initialization_sequence+0xb8>)
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <SDRAM_Initialization_sequence+0xbc>)
 8001158:	f002 f9aa 	bl	80034b0 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4804      	ldr	r0, [pc, #16]	; (8001170 <SDRAM_Initialization_sequence+0xbc>)
 8001160:	f002 f9db 	bl	800351a <HAL_SDRAM_ProgramRefreshRate>
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000180 	.word	0x20000180
 8001170:	2000014c 	.word	0x2000014c

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_MspInit+0x4c>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_MspInit+0x4c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80011b2:	2005      	movs	r0, #5
 80011b4:	f000 fa66 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler+0x4>

080011de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001218:	f000 f920 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8001224:	2080      	movs	r0, #128	; 0x80
 8001226:	f000 ff51 	bl	80020cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <USART1_IRQHandler+0x10>)
 8001236:	f002 f9e5 	bl	8003604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000190 	.word	0x20000190

08001244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <SystemInit+0x28>)
 800124a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124e:	4a07      	ldr	r2, [pc, #28]	; (800126c <SystemInit+0x28>)
 8001250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <SystemInit+0x28>)
 800125a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125e:	609a      	str	r2, [r3, #8]
#endif
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <MX_USART1_UART_Init+0x50>)
 8001278:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 80012a8:	f002 f95f 	bl	800356a <HAL_UART_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012b2:	f7ff fee7 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000190 	.word	0x20000190
 80012c0:	40011000 	.word	0x40011000

080012c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_UART_MspInit+0x94>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d134      	bne.n	8001350 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <HAL_UART_MspInit+0x98>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a1b      	ldr	r2, [pc, #108]	; (800135c <HAL_UART_MspInit+0x98>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_UART_MspInit+0x98>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_UART_MspInit+0x98>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <HAL_UART_MspInit+0x98>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_UART_MspInit+0x98>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800131e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001330:	2307      	movs	r3, #7
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	4809      	ldr	r0, [pc, #36]	; (8001360 <HAL_UART_MspInit+0x9c>)
 800133c:	f000 fd00 	bl	8001d40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	2101      	movs	r1, #1
 8001344:	2025      	movs	r0, #37	; 0x25
 8001346:	f000 f9a8 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800134a:	2025      	movs	r0, #37	; 0x25
 800134c:	f000 f9c1 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40011000 	.word	0x40011000
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800139c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001368:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800136a:	e003      	b.n	8001374 <LoopCopyDataInit>

0800136c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800136e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001370:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001372:	3104      	adds	r1, #4

08001374 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001378:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800137a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800137c:	d3f6      	bcc.n	800136c <CopyDataInit>
  ldr  r2, =_sbss
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001380:	e002      	b.n	8001388 <LoopFillZerobss>

08001382 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001382:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001384:	f842 3b04 	str.w	r3, [r2], #4

08001388 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800138a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800138c:	d3f9      	bcc.n	8001382 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800138e:	f7ff ff59 	bl	8001244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f003 f917 	bl	80045c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff fd97 	bl	8000ec8 <main>
  bx  lr    
 800139a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800139c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80013a0:	0800465c 	.word	0x0800465c
  ldr  r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013a8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80013ac:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80013b0:	200001d8 	.word	0x200001d8

080013b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <HAL_Init+0x40>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_Init+0x40>)
 80013ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_Init+0x40>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f94f 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 f808 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fec2 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x54>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f967 	bl	80016ee <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e00e      	b.n	8001448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d80a      	bhi.n	8001446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f92f 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_InitTick+0x5c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000000 	.word	0x20000000
 8001454:	20000008 	.word	0x20000008
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	200001d4 	.word	0x200001d4

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200001d4 	.word	0x200001d4

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff3e 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff31 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff feb6 	bl	8001484 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d008      	beq.n	8001738 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e052      	b.n	80017de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0216 	bic.w	r2, r2, #22
 8001746:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001756:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	2b00      	cmp	r3, #0
 800175e:	d103      	bne.n	8001768 <HAL_DMA_Abort+0x62>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0208 	bic.w	r2, r2, #8
 8001776:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001788:	e013      	b.n	80017b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800178a:	f7ff fe7b 	bl	8001484 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b05      	cmp	r3, #5
 8001796:	d90c      	bls.n	80017b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2220      	movs	r2, #32
 800179c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2203      	movs	r2, #3
 80017a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e015      	b.n	80017de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1e4      	bne.n	800178a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c4:	223f      	movs	r2, #63	; 0x3f
 80017c6:	409a      	lsls	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d004      	beq.n	8001804 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e00c      	b.n	800181e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2205      	movs	r2, #5
 8001808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0201 	bic.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e03b      	b.n	80018b4 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d106      	bne.n	8001856 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7fe ffa3 	bl	800079c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2202      	movs	r2, #2
 800185a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	f023 0107 	bic.w	r1, r3, #7
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001894:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	68d1      	ldr	r1, [r2, #12]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <HAL_DMA2D_Start+0x1c>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e018      	b.n	800190a <HAL_DMA2D_Start+0x4e>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f988 	bl	8001c08 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d056      	beq.n	80019dc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800192e:	f7ff fda9 	bl	8001484 <HAL_GetTick>
 8001932:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001934:	e04b      	b.n	80019ce <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001944:	2b00      	cmp	r3, #0
 8001946:	d023      	beq.n	8001990 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0320 	and.w	r3, r3, #32
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001956:	f043 0202 	orr.w	r2, r3, #2
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	f043 0201 	orr.w	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2221      	movs	r2, #33	; 0x21
 800197a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2204      	movs	r2, #4
 8001980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0a5      	b.n	8001adc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001996:	d01a      	beq.n	80019ce <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001998:	f7ff fd74 	bl	8001484 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d302      	bcc.n	80019ae <HAL_DMA2D_PollForTransfer+0x9c>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10f      	bne.n	80019ce <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b2:	f043 0220 	orr.w	r2, r3, #32
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2203      	movs	r2, #3
 80019be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e086      	b.n	8001adc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0ac      	beq.n	8001936 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d061      	beq.n	8001ac2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80019fe:	f7ff fd41 	bl	8001484 <HAL_GetTick>
 8001a02:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001a04:	e056      	b.n	8001ab4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d02e      	beq.n	8001a76 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a26:	f043 0204 	orr.w	r2, r3, #4
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3c:	f043 0202 	orr.w	r2, r3, #2
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2229      	movs	r2, #41	; 0x29
 8001a60:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2204      	movs	r2, #4
 8001a66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e032      	b.n	8001adc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d01a      	beq.n	8001ab4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a7e:	f7ff fd01 	bl	8001484 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d302      	bcc.n	8001a94 <HAL_DMA2D_PollForTransfer+0x182>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10f      	bne.n	8001ab4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a98:	f043 0220 	orr.w	r2, r3, #32
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e013      	b.n	8001adc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0a1      	beq.n	8001a06 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2212      	movs	r2, #18
 8001ac8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_DMA2D_ConfigLayer+0x20>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e079      	b.n	8001bf8 <HAL_DMA2D_ConfigLayer+0x114>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	3318      	adds	r3, #24
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001b2e:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <HAL_DMA2D_ConfigLayer+0x120>)
 8001b30:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b0a      	cmp	r3, #10
 8001b38:	d003      	beq.n	8001b42 <HAL_DMA2D_ConfigLayer+0x5e>
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b09      	cmp	r3, #9
 8001b40:	d107      	bne.n	8001b52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e005      	b.n	8001b5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	061b      	lsls	r3, r3, #24
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d120      	bne.n	8001ba6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	ea02 0103 	and.w	r1, r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b0a      	cmp	r3, #10
 8001b8c:	d003      	beq.n	8001b96 <HAL_DMA2D_ConfigLayer+0xb2>
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b09      	cmp	r3, #9
 8001b94:	d127      	bne.n	8001be6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ba4:	e01f      	b.n	8001be6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69da      	ldr	r2, [r3, #28]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	ea02 0103 	and.w	r1, r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b0a      	cmp	r3, #10
 8001bce:	d003      	beq.n	8001bd8 <HAL_DMA2D_ConfigLayer+0xf4>
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b09      	cmp	r3, #9
 8001bd6:	d106      	bne.n	8001be6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001be4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	ff03000f 	.word	0xff03000f

08001c08 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b08b      	sub	sp, #44	; 0x2c
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	041a      	lsls	r2, r3, #16
 8001c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c26:	431a      	orrs	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c40:	d174      	bne.n	8001d2c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c48:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c50:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001c58:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d108      	bne.n	8001c7a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	e053      	b.n	8001d22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d106      	bne.n	8001c90 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8e:	e048      	b.n	8001d22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d111      	bne.n	8001cbc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	0cdb      	lsrs	r3, r3, #19
 8001c9c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	0a9b      	lsrs	r3, r3, #10
 8001ca2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	08db      	lsrs	r3, r3, #3
 8001ca8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	02db      	lsls	r3, r3, #11
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	e032      	b.n	8001d22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d117      	bne.n	8001cf4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	0fdb      	lsrs	r3, r3, #31
 8001cc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	0cdb      	lsrs	r3, r3, #19
 8001cce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	0adb      	lsrs	r3, r3, #11
 8001cd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	029b      	lsls	r3, r3, #10
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	03db      	lsls	r3, r3, #15
 8001cea:	4313      	orrs	r3, r2
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf2:	e016      	b.n	8001d22 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	0f1b      	lsrs	r3, r3, #28
 8001cf8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	0d1b      	lsrs	r3, r3, #20
 8001cfe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	0b1b      	lsrs	r3, r3, #12
 8001d04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	011a      	lsls	r2, r3, #4
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	431a      	orrs	r2, r3
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	031b      	lsls	r3, r3, #12
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d28:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001d2a:	e003      	b.n	8001d34 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	60da      	str	r2, [r3, #12]
}
 8001d34:	bf00      	nop
 8001d36:	372c      	adds	r7, #44	; 0x2c
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	e177      	b.n	800204c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	f040 8166 	bne.w	8002046 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d005      	beq.n	8001d92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d130      	bne.n	8001df4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 0201 	and.w	r2, r3, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d017      	beq.n	8001e30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d123      	bne.n	8001e84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	08da      	lsrs	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3208      	adds	r2, #8
 8001e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	08da      	lsrs	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3208      	adds	r2, #8
 8001e7e:	69b9      	ldr	r1, [r7, #24]
 8001e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0203 	and.w	r2, r3, #3
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80c0 	beq.w	8002046 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b66      	ldr	r3, [pc, #408]	; (8002064 <HAL_GPIO_Init+0x324>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a65      	ldr	r2, [pc, #404]	; (8002064 <HAL_GPIO_Init+0x324>)
 8001ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b63      	ldr	r3, [pc, #396]	; (8002064 <HAL_GPIO_Init+0x324>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ee2:	4a61      	ldr	r2, [pc, #388]	; (8002068 <HAL_GPIO_Init+0x328>)
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a58      	ldr	r2, [pc, #352]	; (800206c <HAL_GPIO_Init+0x32c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d037      	beq.n	8001f7e <HAL_GPIO_Init+0x23e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a57      	ldr	r2, [pc, #348]	; (8002070 <HAL_GPIO_Init+0x330>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d031      	beq.n	8001f7a <HAL_GPIO_Init+0x23a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a56      	ldr	r2, [pc, #344]	; (8002074 <HAL_GPIO_Init+0x334>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d02b      	beq.n	8001f76 <HAL_GPIO_Init+0x236>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a55      	ldr	r2, [pc, #340]	; (8002078 <HAL_GPIO_Init+0x338>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d025      	beq.n	8001f72 <HAL_GPIO_Init+0x232>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a54      	ldr	r2, [pc, #336]	; (800207c <HAL_GPIO_Init+0x33c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01f      	beq.n	8001f6e <HAL_GPIO_Init+0x22e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a53      	ldr	r2, [pc, #332]	; (8002080 <HAL_GPIO_Init+0x340>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d019      	beq.n	8001f6a <HAL_GPIO_Init+0x22a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a52      	ldr	r2, [pc, #328]	; (8002084 <HAL_GPIO_Init+0x344>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0x226>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a51      	ldr	r2, [pc, #324]	; (8002088 <HAL_GPIO_Init+0x348>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <HAL_GPIO_Init+0x222>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a50      	ldr	r2, [pc, #320]	; (800208c <HAL_GPIO_Init+0x34c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x21e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4f      	ldr	r2, [pc, #316]	; (8002090 <HAL_GPIO_Init+0x350>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_GPIO_Init+0x21a>
 8001f56:	2309      	movs	r3, #9
 8001f58:	e012      	b.n	8001f80 <HAL_GPIO_Init+0x240>
 8001f5a:	230a      	movs	r3, #10
 8001f5c:	e010      	b.n	8001f80 <HAL_GPIO_Init+0x240>
 8001f5e:	2308      	movs	r3, #8
 8001f60:	e00e      	b.n	8001f80 <HAL_GPIO_Init+0x240>
 8001f62:	2307      	movs	r3, #7
 8001f64:	e00c      	b.n	8001f80 <HAL_GPIO_Init+0x240>
 8001f66:	2306      	movs	r3, #6
 8001f68:	e00a      	b.n	8001f80 <HAL_GPIO_Init+0x240>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e008      	b.n	8001f80 <HAL_GPIO_Init+0x240>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x240>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e004      	b.n	8001f80 <HAL_GPIO_Init+0x240>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_Init+0x240>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_Init+0x240>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	f002 0203 	and.w	r2, r2, #3
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f90:	4935      	ldr	r1, [pc, #212]	; (8002068 <HAL_GPIO_Init+0x328>)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_GPIO_Init+0x354>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fc2:	4a34      	ldr	r2, [pc, #208]	; (8002094 <HAL_GPIO_Init+0x354>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc8:	4b32      	ldr	r3, [pc, #200]	; (8002094 <HAL_GPIO_Init+0x354>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fec:	4a29      	ldr	r2, [pc, #164]	; (8002094 <HAL_GPIO_Init+0x354>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_GPIO_Init+0x354>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002016:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_GPIO_Init+0x354>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_GPIO_Init+0x354>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <HAL_GPIO_Init+0x354>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3301      	adds	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	f67f ae84 	bls.w	8001d5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800
 8002068:	40013800 	.word	0x40013800
 800206c:	40020000 	.word	0x40020000
 8002070:	40020400 	.word	0x40020400
 8002074:	40020800 	.word	0x40020800
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40021000 	.word	0x40021000
 8002080:	40021400 	.word	0x40021400
 8002084:	40021800 	.word	0x40021800
 8002088:	40021c00 	.word	0x40021c00
 800208c:	40022000 	.word	0x40022000
 8002090:	40022400 	.word	0x40022400
 8002094:	40013c00 	.word	0x40013c00

08002098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
 80020a4:	4613      	mov	r3, r2
 80020a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a8:	787b      	ldrb	r3, [r7, #1]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b4:	e003      	b.n	80020be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	041a      	lsls	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	619a      	str	r2, [r3, #24]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f806 	bl	80020fc <HAL_GPIO_EXTI_Callback>
  }
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40013c00 	.word	0x40013c00

080020fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0bf      	b.n	80022a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe fdfe 	bl	8000d3c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002156:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6999      	ldr	r1, [r3, #24]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800216c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <HAL_LTDC_Init+0x19c>)
 8002188:	400b      	ands	r3, r1
 800218a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	041b      	lsls	r3, r3, #16
 8002192:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6899      	ldr	r1, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68d9      	ldr	r1, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <HAL_LTDC_Init+0x19c>)
 80021b6:	400b      	ands	r3, r1
 80021b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	041b      	lsls	r3, r3, #16
 80021c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68d9      	ldr	r1, [r3, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1a      	ldr	r2, [r3, #32]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6919      	ldr	r1, [r3, #16]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <HAL_LTDC_Init+0x19c>)
 80021e4:	400b      	ands	r3, r1
 80021e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	041b      	lsls	r3, r3, #16
 80021ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6919      	ldr	r1, [r3, #16]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6959      	ldr	r1, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_LTDC_Init+0x19c>)
 8002212:	400b      	ands	r3, r1
 8002214:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6959      	ldr	r1, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0206 	orr.w	r2, r2, #6
 8002282:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	f000f800 	.word	0xf000f800

080022b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80022b4:	b5b0      	push	{r4, r5, r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_LTDC_ConfigLayer+0x1a>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e02c      	b.n	8002328 <HAL_LTDC_ConfigLayer+0x74>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2134      	movs	r1, #52	; 0x34
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4614      	mov	r4, r2
 80022f2:	461d      	mov	r5, r3
 80022f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f89d 	bl	8002448 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2201      	movs	r2, #1
 8002314:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bdb0      	pop	{r4, r5, r7, pc}

08002330 <HAL_LTDC_SetWindowSize>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowSize(LTDC_HandleTypeDef *hltdc, uint32_t XSize, uint32_t YSize, uint32_t LayerIdx)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(XSize));
  assert_param(IS_LTDC_CFBLNBR(YSize));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_LTDC_SetWindowSize+0x1c>
 8002348:	2302      	movs	r3, #2
 800234a:	e033      	b.n	80023b4 <HAL_LTDC_SetWindowSize+0x84>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2234      	movs	r2, #52	; 0x34
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	3338      	adds	r3, #56	; 0x38
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	617b      	str	r3, [r7, #20]

  /* update horizontal stop */
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	441a      	add	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	605a      	str	r2, [r3, #4]

  /* update vertical stop */
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	441a      	add	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	60da      	str	r2, [r3, #12]

  /* Reconfigures the color frame buffer pitch in byte */
  pLayerCfg->ImageWidth = XSize;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reconfigures the frame buffer line number */
  pLayerCfg->ImageHeight = YSize;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	6979      	ldr	r1, [r7, #20]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f857 	bl	8002448 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2201      	movs	r2, #1
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_LTDC_SetWindowPosition+0x1c>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e033      	b.n	8002440 <HAL_LTDC_SetWindowPosition+0x84>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2234      	movs	r2, #52	; 0x34
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	3338      	adds	r3, #56	; 0x38
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4413      	add	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	441a      	add	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	441a      	add	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	6979      	ldr	r1, [r7, #20]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f811 	bl	8002448 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2201      	movs	r2, #1
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	0c1b      	lsrs	r3, r3, #16
 8002460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002464:	4413      	add	r3, r2
 8002466:	041b      	lsls	r3, r3, #16
 8002468:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	01db      	lsls	r3, r3, #7
 8002474:	4413      	add	r3, r2
 8002476:	3384      	adds	r3, #132	; 0x84
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	4611      	mov	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	01d2      	lsls	r2, r2, #7
 8002484:	440a      	add	r2, r1
 8002486:	3284      	adds	r2, #132	; 0x84
 8002488:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800248c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800249e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80024a0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4619      	mov	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	01db      	lsls	r3, r3, #7
 80024ac:	440b      	add	r3, r1
 80024ae:	3384      	adds	r3, #132	; 0x84
 80024b0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80024b6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024c6:	4413      	add	r3, r2
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	01db      	lsls	r3, r3, #7
 80024d6:	4413      	add	r3, r2
 80024d8:	3384      	adds	r3, #132	; 0x84
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	4611      	mov	r1, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	01d2      	lsls	r2, r2, #7
 80024e6:	440a      	add	r2, r1
 80024e8:	3284      	adds	r2, #132	; 0x84
 80024ea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80024ee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024fe:	4413      	add	r3, r2
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	01db      	lsls	r3, r3, #7
 800250c:	440b      	add	r3, r1
 800250e:	3384      	adds	r3, #132	; 0x84
 8002510:	4619      	mov	r1, r3
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4313      	orrs	r3, r2
 8002516:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	01db      	lsls	r3, r3, #7
 8002522:	4413      	add	r3, r2
 8002524:	3384      	adds	r3, #132	; 0x84
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	4611      	mov	r1, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	01d2      	lsls	r2, r2, #7
 8002532:	440a      	add	r2, r1
 8002534:	3284      	adds	r2, #132	; 0x84
 8002536:	f023 0307 	bic.w	r3, r3, #7
 800253a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	01db      	lsls	r3, r3, #7
 8002546:	4413      	add	r3, r2
 8002548:	3384      	adds	r3, #132	; 0x84
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	061b      	lsls	r3, r3, #24
 800256c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	01db      	lsls	r3, r3, #7
 8002578:	4413      	add	r3, r2
 800257a:	3384      	adds	r3, #132	; 0x84
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	01db      	lsls	r3, r3, #7
 8002588:	4413      	add	r3, r2
 800258a:	3384      	adds	r3, #132	; 0x84
 800258c:	461a      	mov	r2, r3
 800258e:	2300      	movs	r3, #0
 8002590:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002598:	461a      	mov	r2, r3
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	431a      	orrs	r2, r3
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	01db      	lsls	r3, r3, #7
 80025ac:	440b      	add	r3, r1
 80025ae:	3384      	adds	r3, #132	; 0x84
 80025b0:	4619      	mov	r1, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	01db      	lsls	r3, r3, #7
 80025c2:	4413      	add	r3, r2
 80025c4:	3384      	adds	r3, #132	; 0x84
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	4611      	mov	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	01d2      	lsls	r2, r2, #7
 80025d2:	440a      	add	r2, r1
 80025d4:	3284      	adds	r2, #132	; 0x84
 80025d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025da:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	01db      	lsls	r3, r3, #7
 80025e6:	4413      	add	r3, r2
 80025e8:	3384      	adds	r3, #132	; 0x84
 80025ea:	461a      	mov	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	01db      	lsls	r3, r3, #7
 80025fc:	4413      	add	r3, r2
 80025fe:	3384      	adds	r3, #132	; 0x84
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	4611      	mov	r1, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	01d2      	lsls	r2, r2, #7
 800260c:	440a      	add	r2, r1
 800260e:	3284      	adds	r2, #132	; 0x84
 8002610:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002614:	f023 0307 	bic.w	r3, r3, #7
 8002618:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	68f9      	ldr	r1, [r7, #12]
 8002624:	6809      	ldr	r1, [r1, #0]
 8002626:	4608      	mov	r0, r1
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	01c9      	lsls	r1, r1, #7
 800262c:	4401      	add	r1, r0
 800262e:	3184      	adds	r1, #132	; 0x84
 8002630:	4313      	orrs	r3, r2
 8002632:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	01db      	lsls	r3, r3, #7
 800263e:	4413      	add	r3, r2
 8002640:	3384      	adds	r3, #132	; 0x84
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	01db      	lsls	r3, r3, #7
 800264e:	4413      	add	r3, r2
 8002650:	3384      	adds	r3, #132	; 0x84
 8002652:	461a      	mov	r2, r3
 8002654:	2300      	movs	r3, #0
 8002656:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	01db      	lsls	r3, r3, #7
 8002662:	4413      	add	r3, r2
 8002664:	3384      	adds	r3, #132	; 0x84
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002676:	2304      	movs	r3, #4
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e01b      	b.n	80026b4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d102      	bne.n	800268a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002684:	2303      	movs	r3, #3
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	e014      	b.n	80026b4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b04      	cmp	r3, #4
 8002690:	d00b      	beq.n	80026aa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002696:	2b02      	cmp	r3, #2
 8002698:	d007      	beq.n	80026aa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d003      	beq.n	80026aa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80026a6:	2b07      	cmp	r3, #7
 80026a8:	d102      	bne.n	80026b0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80026aa:	2302      	movs	r3, #2
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e001      	b.n	80026b4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80026b0:	2301      	movs	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	01db      	lsls	r3, r3, #7
 80026be:	4413      	add	r3, r2
 80026c0:	3384      	adds	r3, #132	; 0x84
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	4611      	mov	r1, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	01d2      	lsls	r2, r2, #7
 80026ce:	440a      	add	r2, r1
 80026d0:	3284      	adds	r2, #132	; 0x84
 80026d2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80026d6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	1acb      	subs	r3, r1, r3
 80026ee:	69f9      	ldr	r1, [r7, #28]
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	6809      	ldr	r1, [r1, #0]
 80026fa:	4608      	mov	r0, r1
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	01c9      	lsls	r1, r1, #7
 8002700:	4401      	add	r1, r0
 8002702:	3184      	adds	r1, #132	; 0x84
 8002704:	4313      	orrs	r3, r2
 8002706:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	01db      	lsls	r3, r3, #7
 8002712:	4413      	add	r3, r2
 8002714:	3384      	adds	r3, #132	; 0x84
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	4611      	mov	r1, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	01d2      	lsls	r2, r2, #7
 8002722:	440a      	add	r2, r1
 8002724:	3284      	adds	r2, #132	; 0x84
 8002726:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800272a:	f023 0307 	bic.w	r3, r3, #7
 800272e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	01db      	lsls	r3, r3, #7
 800273a:	4413      	add	r3, r2
 800273c:	3384      	adds	r3, #132	; 0x84
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	01db      	lsls	r3, r3, #7
 8002750:	4413      	add	r3, r2
 8002752:	3384      	adds	r3, #132	; 0x84
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	4611      	mov	r1, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	01d2      	lsls	r2, r2, #7
 8002760:	440a      	add	r2, r1
 8002762:	3284      	adds	r2, #132	; 0x84
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6013      	str	r3, [r2, #0]
}
 800276a:	bf00      	nop
 800276c:	3724      	adds	r7, #36	; 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_PWREx_EnableOverDrive+0x90>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a1f      	ldr	r2, [pc, #124]	; (8002808 <HAL_PWREx_EnableOverDrive+0x90>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_PWREx_EnableOverDrive+0x90>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800279e:	4b1b      	ldr	r3, [pc, #108]	; (800280c <HAL_PWREx_EnableOverDrive+0x94>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a4:	f7fe fe6e 	bl	8001484 <HAL_GetTick>
 80027a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027aa:	e009      	b.n	80027c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027ac:	f7fe fe6a 	bl	8001484 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ba:	d901      	bls.n	80027c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e01f      	b.n	8002800 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <HAL_PWREx_EnableOverDrive+0x98>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027cc:	d1ee      	bne.n	80027ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027d4:	f7fe fe56 	bl	8001484 <HAL_GetTick>
 80027d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027da:	e009      	b.n	80027f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027dc:	f7fe fe52 	bl	8001484 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ea:	d901      	bls.n	80027f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e007      	b.n	8002800 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_PWREx_EnableOverDrive+0x98>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027fc:	d1ee      	bne.n	80027dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	420e0040 	.word	0x420e0040
 8002810:	40007000 	.word	0x40007000
 8002814:	420e0044 	.word	0x420e0044

08002818 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e267      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d075      	beq.n	8002922 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002836:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b04      	cmp	r3, #4
 8002840:	d00c      	beq.n	800285c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002842:	4b85      	ldr	r3, [pc, #532]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800284a:	2b08      	cmp	r3, #8
 800284c:	d112      	bne.n	8002874 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284e:	4b82      	ldr	r3, [pc, #520]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800285a:	d10b      	bne.n	8002874 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	4b7e      	ldr	r3, [pc, #504]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d05b      	beq.n	8002920 <HAL_RCC_OscConfig+0x108>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d157      	bne.n	8002920 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e242      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d106      	bne.n	800288c <HAL_RCC_OscConfig+0x74>
 800287e:	4b76      	ldr	r3, [pc, #472]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a75      	ldr	r2, [pc, #468]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e01d      	b.n	80028c8 <HAL_RCC_OscConfig+0xb0>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x98>
 8002896:	4b70      	ldr	r3, [pc, #448]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a6f      	ldr	r2, [pc, #444]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 800289c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b6d      	ldr	r3, [pc, #436]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6c      	ldr	r2, [pc, #432]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0xb0>
 80028b0:	4b69      	ldr	r3, [pc, #420]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a68      	ldr	r2, [pc, #416]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 80028b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	4b66      	ldr	r3, [pc, #408]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a65      	ldr	r2, [pc, #404]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 80028c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d013      	beq.n	80028f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7fe fdd8 	bl	8001484 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d8:	f7fe fdd4 	bl	8001484 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e207      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	4b5b      	ldr	r3, [pc, #364]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0xc0>
 80028f6:	e014      	b.n	8002922 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe fdc4 	bl	8001484 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002900:	f7fe fdc0 	bl	8001484 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e1f3      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002912:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0xe8>
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d063      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800292e:	4b4a      	ldr	r3, [pc, #296]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00b      	beq.n	8002952 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293a:	4b47      	ldr	r3, [pc, #284]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002942:	2b08      	cmp	r3, #8
 8002944:	d11c      	bne.n	8002980 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002946:	4b44      	ldr	r3, [pc, #272]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d116      	bne.n	8002980 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002952:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_RCC_OscConfig+0x152>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d001      	beq.n	800296a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e1c7      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296a:	4b3b      	ldr	r3, [pc, #236]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4937      	ldr	r1, [pc, #220]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297e:	e03a      	b.n	80029f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d020      	beq.n	80029ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002988:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7fe fd79 	bl	8001484 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002996:	f7fe fd75 	bl	8001484 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e1a8      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a8:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4925      	ldr	r1, [pc, #148]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	600b      	str	r3, [r1, #0]
 80029c8:	e015      	b.n	80029f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe fd58 	bl	8001484 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d8:	f7fe fd54 	bl	8001484 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e187      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d036      	beq.n	8002a70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d016      	beq.n	8002a38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <HAL_RCC_OscConfig+0x248>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7fe fd38 	bl	8001484 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a18:	f7fe fd34 	bl	8001484 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e167      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x200>
 8002a36:	e01b      	b.n	8002a70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_OscConfig+0x248>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fd21 	bl	8001484 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a44:	e00e      	b.n	8002a64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a46:	f7fe fd1d 	bl	8001484 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d907      	bls.n	8002a64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e150      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	42470000 	.word	0x42470000
 8002a60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a64:	4b88      	ldr	r3, [pc, #544]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ea      	bne.n	8002a46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8097 	beq.w	8002bac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a82:	4b81      	ldr	r3, [pc, #516]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10f      	bne.n	8002aae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	4b7d      	ldr	r3, [pc, #500]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a7c      	ldr	r2, [pc, #496]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b7a      	ldr	r3, [pc, #488]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aae:	4b77      	ldr	r3, [pc, #476]	; (8002c8c <HAL_RCC_OscConfig+0x474>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d118      	bne.n	8002aec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aba:	4b74      	ldr	r3, [pc, #464]	; (8002c8c <HAL_RCC_OscConfig+0x474>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a73      	ldr	r2, [pc, #460]	; (8002c8c <HAL_RCC_OscConfig+0x474>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fcdd 	bl	8001484 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7fe fcd9 	bl	8001484 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e10c      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae0:	4b6a      	ldr	r3, [pc, #424]	; (8002c8c <HAL_RCC_OscConfig+0x474>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x2ea>
 8002af4:	4b64      	ldr	r3, [pc, #400]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a63      	ldr	r2, [pc, #396]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
 8002b00:	e01c      	b.n	8002b3c <HAL_RCC_OscConfig+0x324>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x30c>
 8002b0a:	4b5f      	ldr	r3, [pc, #380]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a5e      	ldr	r2, [pc, #376]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
 8002b16:	4b5c      	ldr	r3, [pc, #368]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	4a5b      	ldr	r2, [pc, #364]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6713      	str	r3, [r2, #112]	; 0x70
 8002b22:	e00b      	b.n	8002b3c <HAL_RCC_OscConfig+0x324>
 8002b24:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4a57      	ldr	r2, [pc, #348]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f023 0301 	bic.w	r3, r3, #1
 8002b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b30:	4b55      	ldr	r3, [pc, #340]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	4a54      	ldr	r2, [pc, #336]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002b36:	f023 0304 	bic.w	r3, r3, #4
 8002b3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d015      	beq.n	8002b70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7fe fc9e 	bl	8001484 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7fe fc9a 	bl	8001484 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e0cb      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b62:	4b49      	ldr	r3, [pc, #292]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0ee      	beq.n	8002b4c <HAL_RCC_OscConfig+0x334>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b70:	f7fe fc88 	bl	8001484 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7fe fc84 	bl	8001484 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e0b5      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8e:	4b3e      	ldr	r3, [pc, #248]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1ee      	bne.n	8002b78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b9a:	7dfb      	ldrb	r3, [r7, #23]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d105      	bne.n	8002bac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba0:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	4a38      	ldr	r2, [pc, #224]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80a1 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bb6:	4b34      	ldr	r3, [pc, #208]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d05c      	beq.n	8002c7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d141      	bne.n	8002c4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bca:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_RCC_OscConfig+0x478>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fc58 	bl	8001484 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fc54 	bl	8001484 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e087      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69da      	ldr	r2, [r3, #28]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	019b      	lsls	r3, r3, #6
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	041b      	lsls	r3, r3, #16
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	491b      	ldr	r1, [pc, #108]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x478>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c26:	f7fe fc2d 	bl	8001484 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2e:	f7fe fc29 	bl	8001484 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e05c      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x416>
 8002c4c:	e054      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <HAL_RCC_OscConfig+0x478>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fe fc16 	bl	8001484 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe fc12 	bl	8001484 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e045      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_RCC_OscConfig+0x470>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x444>
 8002c7a:	e03d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e038      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x4ec>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d028      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d121      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d11a      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d111      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800

08002d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0cc      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b68      	ldr	r3, [pc, #416]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d90c      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0b8      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4a52      	ldr	r2, [pc, #328]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d80:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	494d      	ldr	r1, [pc, #308]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d044      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d119      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e06f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e067      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de6:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4934      	ldr	r1, [pc, #208]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df8:	f7fe fb44 	bl	8001484 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7fe fb40 	bl	8001484 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e04f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 020c 	and.w	r2, r3, #12
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1eb      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d20c      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e032      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4916      	ldr	r1, [pc, #88]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	490e      	ldr	r1, [pc, #56]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e8e:	f000 f821 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	490a      	ldr	r1, [pc, #40]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	5ccb      	ldrb	r3, [r1, r3]
 8002ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea6:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe faa4 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023c00 	.word	0x40023c00
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	08004634 	.word	0x08004634
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	20000004 	.word	0x20000004

08002ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed8:	b090      	sub	sp, #64	; 0x40
 8002eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d00d      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x40>
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	f200 80a1 	bhi.w	8003040 <HAL_RCC_GetSysClockFreq+0x16c>
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x34>
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d003      	beq.n	8002f0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f06:	e09b      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f08:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f0a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f0c:	e09b      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f0e:	4b53      	ldr	r3, [pc, #332]	; (800305c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f12:	e098      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f14:	4b4f      	ldr	r3, [pc, #316]	; (8003054 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f1e:	4b4d      	ldr	r3, [pc, #308]	; (8003054 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d028      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f2a:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	099b      	lsrs	r3, r3, #6
 8002f30:	2200      	movs	r2, #0
 8002f32:	623b      	str	r3, [r7, #32]
 8002f34:	627a      	str	r2, [r7, #36]	; 0x24
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4b47      	ldr	r3, [pc, #284]	; (800305c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f40:	fb03 f201 	mul.w	r2, r3, r1
 8002f44:	2300      	movs	r3, #0
 8002f46:	fb00 f303 	mul.w	r3, r0, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	4a43      	ldr	r2, [pc, #268]	; (800305c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f4e:	fba0 1202 	umull	r1, r2, r0, r2
 8002f52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f54:	460a      	mov	r2, r1
 8002f56:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f5a:	4413      	add	r3, r2
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f60:	2200      	movs	r2, #0
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	61fa      	str	r2, [r7, #28]
 8002f66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f6e:	f7fd f93d 	bl	80001ec <__aeabi_uldivmod>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4613      	mov	r3, r2
 8002f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f7a:	e053      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	2200      	movs	r2, #0
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	617a      	str	r2, [r7, #20]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f8e:	f04f 0b00 	mov.w	fp, #0
 8002f92:	4652      	mov	r2, sl
 8002f94:	465b      	mov	r3, fp
 8002f96:	f04f 0000 	mov.w	r0, #0
 8002f9a:	f04f 0100 	mov.w	r1, #0
 8002f9e:	0159      	lsls	r1, r3, #5
 8002fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa4:	0150      	lsls	r0, r2, #5
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	ebb2 080a 	subs.w	r8, r2, sl
 8002fae:	eb63 090b 	sbc.w	r9, r3, fp
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fc6:	ebb2 0408 	subs.w	r4, r2, r8
 8002fca:	eb63 0509 	sbc.w	r5, r3, r9
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	00eb      	lsls	r3, r5, #3
 8002fd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fdc:	00e2      	lsls	r2, r4, #3
 8002fde:	4614      	mov	r4, r2
 8002fe0:	461d      	mov	r5, r3
 8002fe2:	eb14 030a 	adds.w	r3, r4, sl
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	eb45 030b 	adc.w	r3, r5, fp
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	028b      	lsls	r3, r1, #10
 8002ffe:	4621      	mov	r1, r4
 8003000:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003004:	4621      	mov	r1, r4
 8003006:	028a      	lsls	r2, r1, #10
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	2200      	movs	r2, #0
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	60fa      	str	r2, [r7, #12]
 8003014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003018:	f7fd f8e8 	bl	80001ec <__aeabi_uldivmod>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4613      	mov	r3, r2
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_GetSysClockFreq+0x180>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	3301      	adds	r3, #1
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800303e:	e002      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_GetSysClockFreq+0x184>)
 8003042:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003048:	4618      	mov	r0, r3
 800304a:	3740      	adds	r7, #64	; 0x40
 800304c:	46bd      	mov	sp, r7
 800304e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	00f42400 	.word	0x00f42400
 800305c:	017d7840 	.word	0x017d7840

08003060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_RCC_GetHCLKFreq+0x14>)
 8003066:	681b      	ldr	r3, [r3, #0]
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000000 	.word	0x20000000

08003078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800307c:	f7ff fff0 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0a9b      	lsrs	r3, r3, #10
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4903      	ldr	r1, [pc, #12]	; (800309c <HAL_RCC_GetPCLK1Freq+0x24>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	08004644 	.word	0x08004644

080030a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030a4:	f7ff ffdc 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	0b5b      	lsrs	r3, r3, #13
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	4903      	ldr	r1, [pc, #12]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	08004644 	.word	0x08004644

080030c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10b      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d075      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030fc:	4b91      	ldr	r3, [pc, #580]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003102:	f7fe f9bf 	bl	8001484 <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003108:	e008      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800310a:	f7fe f9bb 	bl	8001484 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e189      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800311c:	4b8a      	ldr	r3, [pc, #552]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d009      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	019a      	lsls	r2, r3, #6
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	071b      	lsls	r3, r3, #28
 8003140:	4981      	ldr	r1, [pc, #516]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01f      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003154:	4b7c      	ldr	r3, [pc, #496]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315a:	0f1b      	lsrs	r3, r3, #28
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	019a      	lsls	r2, r3, #6
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	431a      	orrs	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	071b      	lsls	r3, r3, #28
 8003174:	4974      	ldr	r1, [pc, #464]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800317c:	4b72      	ldr	r3, [pc, #456]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800317e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003182:	f023 021f 	bic.w	r2, r3, #31
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	3b01      	subs	r3, #1
 800318c:	496e      	ldr	r1, [pc, #440]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00d      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	019a      	lsls	r2, r3, #6
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	061b      	lsls	r3, r3, #24
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	071b      	lsls	r3, r3, #28
 80031b4:	4964      	ldr	r1, [pc, #400]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031bc:	4b61      	ldr	r3, [pc, #388]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031c2:	f7fe f95f 	bl	8001484 <HAL_GetTick>
 80031c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031ca:	f7fe f95b 	bl	8001484 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e129      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031dc:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d079      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003200:	4b52      	ldr	r3, [pc, #328]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003206:	f7fe f93d 	bl	8001484 <HAL_GetTick>
 800320a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800320e:	f7fe f939 	bl	8001484 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e107      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003220:	4b49      	ldr	r3, [pc, #292]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800322c:	d0ef      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d020      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800323a:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	0f1b      	lsrs	r3, r3, #28
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	019a      	lsls	r2, r3, #6
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	061b      	lsls	r3, r3, #24
 8003254:	431a      	orrs	r2, r3
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	071b      	lsls	r3, r3, #28
 800325a:	493b      	ldr	r1, [pc, #236]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003262:	4b39      	ldr	r3, [pc, #228]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003268:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	3b01      	subs	r3, #1
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	4934      	ldr	r1, [pc, #208]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01e      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003288:	4b2f      	ldr	r3, [pc, #188]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	0e1b      	lsrs	r3, r3, #24
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	019a      	lsls	r2, r3, #6
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	061b      	lsls	r3, r3, #24
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	071b      	lsls	r3, r3, #28
 80032a8:	4927      	ldr	r1, [pc, #156]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	4922      	ldr	r1, [pc, #136]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032c6:	4b21      	ldr	r3, [pc, #132]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032cc:	f7fe f8da 	bl	8001484 <HAL_GetTick>
 80032d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80032d4:	f7fe f8d6 	bl	8001484 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0a4      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032e6:	4b18      	ldr	r3, [pc, #96]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f2:	d1ef      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 808b 	beq.w	8003418 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a0f      	ldr	r2, [pc, #60]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003328:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800332a:	f7fe f8ab 	bl	8001484 <HAL_GetTick>
 800332e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003330:	e010      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003332:	f7fe f8a7 	bl	8001484 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d909      	bls.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e075      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003344:	42470068 	.word	0x42470068
 8003348:	40023800 	.word	0x40023800
 800334c:	42470070 	.word	0x42470070
 8003350:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003354:	4b38      	ldr	r3, [pc, #224]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0e8      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003360:	4b36      	ldr	r3, [pc, #216]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003368:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d02f      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	429a      	cmp	r2, r3
 800337c:	d028      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800337e:	4b2f      	ldr	r3, [pc, #188]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003386:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003388:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003394:	4a29      	ldr	r2, [pc, #164]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800339a:	4b28      	ldr	r3, [pc, #160]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d114      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80033a6:	f7fe f86d 	bl	8001484 <HAL_GetTick>
 80033aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fe f869 	bl	8001484 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e035      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ee      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033dc:	d10d      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 80033de:	4b17      	ldr	r3, [pc, #92]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80033ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f2:	4912      	ldr	r1, [pc, #72]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	608b      	str	r3, [r1, #8]
 80033f8:	e005      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4a0f      	ldr	r2, [pc, #60]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003400:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003404:	6093      	str	r3, [r2, #8]
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003408:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003412:	490a      	ldr	r1, [pc, #40]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003414:	4313      	orrs	r3, r2
 8003416:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800342c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40007000 	.word	0x40007000
 800343c:	40023800 	.word	0x40023800
 8003440:	42470e40 	.word	0x42470e40
 8003444:	424711e0 	.word	0x424711e0

08003448 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e025      	b.n	80034a8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d106      	bne.n	8003476 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fd fa95 	bl	80009a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f000 ff81 	bl	8004390 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	461a      	mov	r2, r3
 8003498:	6839      	ldr	r1, [r7, #0]
 800349a:	f000 ffd6 	bl	800444a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80034c2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d101      	bne.n	80034ce <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
 80034cc:	e021      	b.n	8003512 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d002      	beq.n	80034da <HAL_SDRAM_SendCommand+0x2a>
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d118      	bne.n	800350c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2202      	movs	r2, #2
 80034de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f001 f816 	bl	800451c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d104      	bne.n	8003502 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2205      	movs	r2, #5
 80034fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003500:	e006      	b.n	8003510 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800350a:	e001      	b.n	8003510 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d101      	bne.n	8003534 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003530:	2302      	movs	r3, #2
 8003532:	e016      	b.n	8003562 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d10f      	bne.n	8003560 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6839      	ldr	r1, [r7, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f001 f821 	bl	8004596 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	e000      	b.n	8003562 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e03f      	b.n	80035fc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7fd fe97 	bl	80012c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2224      	movs	r2, #36	; 0x24
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fc7a 	bl	8003ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b0ba      	sub	sp, #232	; 0xe8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003630:	2300      	movs	r3, #0
 8003632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10f      	bne.n	800366a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_UART_IRQHandler+0x66>
 8003656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fb65 	bl	8003d32 <UART_Receive_IT>
      return;
 8003668:	e256      	b.n	8003b18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800366a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80de 	beq.w	8003830 <HAL_UART_IRQHandler+0x22c>
 8003674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003684:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80d1 	beq.w	8003830 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_UART_IRQHandler+0xae>
 800369a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f043 0201 	orr.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_UART_IRQHandler+0xd2>
 80036be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f043 0202 	orr.w	r2, r3, #2
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00b      	beq.n	80036fa <HAL_UART_IRQHandler+0xf6>
 80036e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f043 0204 	orr.w	r2, r3, #4
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d011      	beq.n	800372a <HAL_UART_IRQHandler+0x126>
 8003706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d105      	bne.n	800371e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f043 0208 	orr.w	r2, r3, #8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 81ed 	beq.w	8003b0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_UART_IRQHandler+0x14e>
 8003740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 faf0 	bl	8003d32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <HAL_UART_IRQHandler+0x17a>
 8003776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d04f      	beq.n	800381e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f9f8 	bl	8003b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d141      	bne.n	8003816 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3314      	adds	r3, #20
 8003798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3314      	adds	r3, #20
 80037ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1d9      	bne.n	8003792 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d013      	beq.n	800380e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	4a7d      	ldr	r2, [pc, #500]	; (80039e0 <HAL_UART_IRQHandler+0x3dc>)
 80037ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fd fff7 	bl	80017e6 <HAL_DMA_Abort_IT>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003808:	4610      	mov	r0, r2
 800380a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	e00e      	b.n	800382c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f99a 	bl	8003b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	e00a      	b.n	800382c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f996 	bl	8003b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	e006      	b.n	800382c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f992 	bl	8003b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800382a:	e170      	b.n	8003b0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	bf00      	nop
    return;
 800382e:	e16e      	b.n	8003b0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 814a 	bne.w	8003ace <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800383a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8143 	beq.w	8003ace <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 813c 	beq.w	8003ace <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003856:	2300      	movs	r3, #0
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	f040 80b4 	bne.w	80039e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8140 	beq.w	8003b12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800389a:	429a      	cmp	r2, r3
 800389c:	f080 8139 	bcs.w	8003b12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b2:	f000 8088 	beq.w	80039c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1d9      	bne.n	80038b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3314      	adds	r3, #20
 8003908:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003914:	f023 0301 	bic.w	r3, r3, #1
 8003918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3314      	adds	r3, #20
 8003922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003926:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800392a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800392e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e1      	bne.n	8003902 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3314      	adds	r3, #20
 8003944:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800394e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3314      	adds	r3, #20
 800395e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003962:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003964:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003966:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003968:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800396a:	e841 2300 	strex	r3, r2, [r1]
 800396e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1e3      	bne.n	800393e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003996:	f023 0310 	bic.w	r3, r3, #16
 800399a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80039aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e3      	bne.n	8003984 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fd fea0 	bl	8001706 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8c0 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039dc:	e099      	b.n	8003b12 <HAL_UART_IRQHandler+0x50e>
 80039de:	bf00      	nop
 80039e0:	08003c3b 	.word	0x08003c3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 808b 	beq.w	8003b16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8086 	beq.w	8003b16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	330c      	adds	r3, #12
 8003a10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a2e:	647a      	str	r2, [r7, #68]	; 0x44
 8003a30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e3      	bne.n	8003a0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3314      	adds	r3, #20
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	623b      	str	r3, [r7, #32]
   return(result);
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3314      	adds	r3, #20
 8003a62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a66:	633a      	str	r2, [r7, #48]	; 0x30
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e3      	bne.n	8003a42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	330c      	adds	r3, #12
 8003a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0310 	bic.w	r3, r3, #16
 8003a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003aac:	61fa      	str	r2, [r7, #28]
 8003aae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	69b9      	ldr	r1, [r7, #24]
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e3      	bne.n	8003a88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f848 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003acc:	e023      	b.n	8003b16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_UART_IRQHandler+0x4ea>
 8003ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f8bb 	bl	8003c62 <UART_Transmit_IT>
    return;
 8003aec:	e014      	b.n	8003b18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00e      	beq.n	8003b18 <HAL_UART_IRQHandler+0x514>
 8003afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8fb 	bl	8003d02 <UART_EndTransmit_IT>
    return;
 8003b0c:	e004      	b.n	8003b18 <HAL_UART_IRQHandler+0x514>
    return;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <HAL_UART_IRQHandler+0x514>
      return;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <HAL_UART_IRQHandler+0x514>
      return;
 8003b16:	bf00      	nop
  }
}
 8003b18:	37e8      	adds	r7, #232	; 0xe8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop

08003b20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b095      	sub	sp, #84	; 0x54
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b9c:	643a      	str	r2, [r7, #64]	; 0x40
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e5      	bne.n	8003b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3314      	adds	r3, #20
 8003bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e5      	bne.n	8003bb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d119      	bne.n	8003c20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f023 0310 	bic.w	r3, r3, #16
 8003c02:	647b      	str	r3, [r7, #68]	; 0x44
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c0c:	61ba      	str	r2, [r7, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6979      	ldr	r1, [r7, #20]
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c2e:	bf00      	nop
 8003c30:	3754      	adds	r7, #84	; 0x54
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff ff77 	bl	8003b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b21      	cmp	r3, #33	; 0x21
 8003c74:	d13e      	bne.n	8003cf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d114      	bne.n	8003caa <UART_Transmit_IT+0x48>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d110      	bne.n	8003caa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	621a      	str	r2, [r3, #32]
 8003ca8:	e008      	b.n	8003cbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6211      	str	r1, [r2, #32]
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10f      	bne.n	8003cf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fefc 	bl	8003b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b08c      	sub	sp, #48	; 0x30
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b22      	cmp	r3, #34	; 0x22
 8003d44:	f040 80ab 	bne.w	8003e9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d117      	bne.n	8003d82 <UART_Receive_IT+0x50>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d113      	bne.n	8003d82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	1c9a      	adds	r2, r3, #2
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d80:	e026      	b.n	8003dd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d94:	d007      	beq.n	8003da6 <UART_Receive_IT+0x74>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <UART_Receive_IT+0x82>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	e008      	b.n	8003dc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d15a      	bne.n	8003e9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0220 	bic.w	r2, r2, #32
 8003df2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d135      	bne.n	8003e90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f023 0310 	bic.w	r3, r3, #16
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4a:	623a      	str	r2, [r7, #32]
 8003e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	69f9      	ldr	r1, [r7, #28]
 8003e50:	6a3a      	ldr	r2, [r7, #32]
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e5      	bne.n	8003e2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d10a      	bne.n	8003e82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff fe67 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
 8003e8e:	e002      	b.n	8003e96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff fe4f 	bl	8003b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e002      	b.n	8003ea0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e000      	b.n	8003ea0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3730      	adds	r7, #48	; 0x30
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eac:	b0c0      	sub	sp, #256	; 0x100
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	68d9      	ldr	r1, [r3, #12]
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	ea40 0301 	orr.w	r3, r0, r1
 8003ed0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f00:	f021 010c 	bic.w	r1, r1, #12
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f22:	6999      	ldr	r1, [r3, #24]
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	ea40 0301 	orr.w	r3, r0, r1
 8003f2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b8f      	ldr	r3, [pc, #572]	; (8004174 <UART_SetConfig+0x2cc>)
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d005      	beq.n	8003f48 <UART_SetConfig+0xa0>
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b8d      	ldr	r3, [pc, #564]	; (8004178 <UART_SetConfig+0x2d0>)
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d104      	bne.n	8003f52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f48:	f7ff f8aa 	bl	80030a0 <HAL_RCC_GetPCLK2Freq>
 8003f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f50:	e003      	b.n	8003f5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f52:	f7ff f891 	bl	8003078 <HAL_RCC_GetPCLK1Freq>
 8003f56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f64:	f040 810c 	bne.w	8004180 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	1891      	adds	r1, r2, r2
 8003f80:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f82:	415b      	adcs	r3, r3
 8003f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	eb12 0801 	adds.w	r8, r2, r1
 8003f90:	4629      	mov	r1, r5
 8003f92:	eb43 0901 	adc.w	r9, r3, r1
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003faa:	4690      	mov	r8, r2
 8003fac:	4699      	mov	r9, r3
 8003fae:	4623      	mov	r3, r4
 8003fb0:	eb18 0303 	adds.w	r3, r8, r3
 8003fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fb8:	462b      	mov	r3, r5
 8003fba:	eb49 0303 	adc.w	r3, r9, r3
 8003fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	18db      	adds	r3, r3, r3
 8003fda:	653b      	str	r3, [r7, #80]	; 0x50
 8003fdc:	4613      	mov	r3, r2
 8003fde:	eb42 0303 	adc.w	r3, r2, r3
 8003fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8003fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fec:	f7fc f8fe 	bl	80001ec <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4b61      	ldr	r3, [pc, #388]	; (800417c <UART_SetConfig+0x2d4>)
 8003ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	011c      	lsls	r4, r3, #4
 8003ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004002:	2200      	movs	r2, #0
 8004004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004008:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800400c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004010:	4642      	mov	r2, r8
 8004012:	464b      	mov	r3, r9
 8004014:	1891      	adds	r1, r2, r2
 8004016:	64b9      	str	r1, [r7, #72]	; 0x48
 8004018:	415b      	adcs	r3, r3
 800401a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800401c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004020:	4641      	mov	r1, r8
 8004022:	eb12 0a01 	adds.w	sl, r2, r1
 8004026:	4649      	mov	r1, r9
 8004028:	eb43 0b01 	adc.w	fp, r3, r1
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800403c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004040:	4692      	mov	sl, r2
 8004042:	469b      	mov	fp, r3
 8004044:	4643      	mov	r3, r8
 8004046:	eb1a 0303 	adds.w	r3, sl, r3
 800404a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800404e:	464b      	mov	r3, r9
 8004050:	eb4b 0303 	adc.w	r3, fp, r3
 8004054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004064:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004068:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800406c:	460b      	mov	r3, r1
 800406e:	18db      	adds	r3, r3, r3
 8004070:	643b      	str	r3, [r7, #64]	; 0x40
 8004072:	4613      	mov	r3, r2
 8004074:	eb42 0303 	adc.w	r3, r2, r3
 8004078:	647b      	str	r3, [r7, #68]	; 0x44
 800407a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800407e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004082:	f7fc f8b3 	bl	80001ec <__aeabi_uldivmod>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4611      	mov	r1, r2
 800408c:	4b3b      	ldr	r3, [pc, #236]	; (800417c <UART_SetConfig+0x2d4>)
 800408e:	fba3 2301 	umull	r2, r3, r3, r1
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	2264      	movs	r2, #100	; 0x64
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	1acb      	subs	r3, r1, r3
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040a2:	4b36      	ldr	r3, [pc, #216]	; (800417c <UART_SetConfig+0x2d4>)
 80040a4:	fba3 2302 	umull	r2, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040b0:	441c      	add	r4, r3
 80040b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80040cc:	415b      	adcs	r3, r3
 80040ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040d4:	4641      	mov	r1, r8
 80040d6:	1851      	adds	r1, r2, r1
 80040d8:	6339      	str	r1, [r7, #48]	; 0x30
 80040da:	4649      	mov	r1, r9
 80040dc:	414b      	adcs	r3, r1
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040ec:	4659      	mov	r1, fp
 80040ee:	00cb      	lsls	r3, r1, #3
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f6:	4651      	mov	r1, sl
 80040f8:	00ca      	lsls	r2, r1, #3
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	4642      	mov	r2, r8
 8004102:	189b      	adds	r3, r3, r2
 8004104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004108:	464b      	mov	r3, r9
 800410a:	460a      	mov	r2, r1
 800410c:	eb42 0303 	adc.w	r3, r2, r3
 8004110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004120:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004128:	460b      	mov	r3, r1
 800412a:	18db      	adds	r3, r3, r3
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
 800412e:	4613      	mov	r3, r2
 8004130:	eb42 0303 	adc.w	r3, r2, r3
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800413a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800413e:	f7fc f855 	bl	80001ec <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <UART_SetConfig+0x2d4>)
 8004148:	fba3 1302 	umull	r1, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	2164      	movs	r1, #100	; 0x64
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	3332      	adds	r3, #50	; 0x32
 800415a:	4a08      	ldr	r2, [pc, #32]	; (800417c <UART_SetConfig+0x2d4>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	f003 0207 	and.w	r2, r3, #7
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4422      	add	r2, r4
 800416e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004170:	e105      	b.n	800437e <UART_SetConfig+0x4d6>
 8004172:	bf00      	nop
 8004174:	40011000 	.word	0x40011000
 8004178:	40011400 	.word	0x40011400
 800417c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004184:	2200      	movs	r2, #0
 8004186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800418a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800418e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004192:	4642      	mov	r2, r8
 8004194:	464b      	mov	r3, r9
 8004196:	1891      	adds	r1, r2, r2
 8004198:	6239      	str	r1, [r7, #32]
 800419a:	415b      	adcs	r3, r3
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
 800419e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041a2:	4641      	mov	r1, r8
 80041a4:	1854      	adds	r4, r2, r1
 80041a6:	4649      	mov	r1, r9
 80041a8:	eb43 0501 	adc.w	r5, r3, r1
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	00eb      	lsls	r3, r5, #3
 80041b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ba:	00e2      	lsls	r2, r4, #3
 80041bc:	4614      	mov	r4, r2
 80041be:	461d      	mov	r5, r3
 80041c0:	4643      	mov	r3, r8
 80041c2:	18e3      	adds	r3, r4, r3
 80041c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041c8:	464b      	mov	r3, r9
 80041ca:	eb45 0303 	adc.w	r3, r5, r3
 80041ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041ee:	4629      	mov	r1, r5
 80041f0:	008b      	lsls	r3, r1, #2
 80041f2:	4621      	mov	r1, r4
 80041f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f8:	4621      	mov	r1, r4
 80041fa:	008a      	lsls	r2, r1, #2
 80041fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004200:	f7fb fff4 	bl	80001ec <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4b60      	ldr	r3, [pc, #384]	; (800438c <UART_SetConfig+0x4e4>)
 800420a:	fba3 2302 	umull	r2, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	011c      	lsls	r4, r3, #4
 8004212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004216:	2200      	movs	r2, #0
 8004218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800421c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004220:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004224:	4642      	mov	r2, r8
 8004226:	464b      	mov	r3, r9
 8004228:	1891      	adds	r1, r2, r2
 800422a:	61b9      	str	r1, [r7, #24]
 800422c:	415b      	adcs	r3, r3
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004234:	4641      	mov	r1, r8
 8004236:	1851      	adds	r1, r2, r1
 8004238:	6139      	str	r1, [r7, #16]
 800423a:	4649      	mov	r1, r9
 800423c:	414b      	adcs	r3, r1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800424c:	4659      	mov	r1, fp
 800424e:	00cb      	lsls	r3, r1, #3
 8004250:	4651      	mov	r1, sl
 8004252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004256:	4651      	mov	r1, sl
 8004258:	00ca      	lsls	r2, r1, #3
 800425a:	4610      	mov	r0, r2
 800425c:	4619      	mov	r1, r3
 800425e:	4603      	mov	r3, r0
 8004260:	4642      	mov	r2, r8
 8004262:	189b      	adds	r3, r3, r2
 8004264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004268:	464b      	mov	r3, r9
 800426a:	460a      	mov	r2, r1
 800426c:	eb42 0303 	adc.w	r3, r2, r3
 8004270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	67bb      	str	r3, [r7, #120]	; 0x78
 800427e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800428c:	4649      	mov	r1, r9
 800428e:	008b      	lsls	r3, r1, #2
 8004290:	4641      	mov	r1, r8
 8004292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004296:	4641      	mov	r1, r8
 8004298:	008a      	lsls	r2, r1, #2
 800429a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800429e:	f7fb ffa5 	bl	80001ec <__aeabi_uldivmod>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4b39      	ldr	r3, [pc, #228]	; (800438c <UART_SetConfig+0x4e4>)
 80042a8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	2164      	movs	r1, #100	; 0x64
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	3332      	adds	r3, #50	; 0x32
 80042ba:	4a34      	ldr	r2, [pc, #208]	; (800438c <UART_SetConfig+0x4e4>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c6:	441c      	add	r4, r3
 80042c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042cc:	2200      	movs	r2, #0
 80042ce:	673b      	str	r3, [r7, #112]	; 0x70
 80042d0:	677a      	str	r2, [r7, #116]	; 0x74
 80042d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042d6:	4642      	mov	r2, r8
 80042d8:	464b      	mov	r3, r9
 80042da:	1891      	adds	r1, r2, r2
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	415b      	adcs	r3, r3
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e6:	4641      	mov	r1, r8
 80042e8:	1851      	adds	r1, r2, r1
 80042ea:	6039      	str	r1, [r7, #0]
 80042ec:	4649      	mov	r1, r9
 80042ee:	414b      	adcs	r3, r1
 80042f0:	607b      	str	r3, [r7, #4]
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042fe:	4659      	mov	r1, fp
 8004300:	00cb      	lsls	r3, r1, #3
 8004302:	4651      	mov	r1, sl
 8004304:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004308:	4651      	mov	r1, sl
 800430a:	00ca      	lsls	r2, r1, #3
 800430c:	4610      	mov	r0, r2
 800430e:	4619      	mov	r1, r3
 8004310:	4603      	mov	r3, r0
 8004312:	4642      	mov	r2, r8
 8004314:	189b      	adds	r3, r3, r2
 8004316:	66bb      	str	r3, [r7, #104]	; 0x68
 8004318:	464b      	mov	r3, r9
 800431a:	460a      	mov	r2, r1
 800431c:	eb42 0303 	adc.w	r3, r2, r3
 8004320:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	663b      	str	r3, [r7, #96]	; 0x60
 800432c:	667a      	str	r2, [r7, #100]	; 0x64
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800433a:	4649      	mov	r1, r9
 800433c:	008b      	lsls	r3, r1, #2
 800433e:	4641      	mov	r1, r8
 8004340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004344:	4641      	mov	r1, r8
 8004346:	008a      	lsls	r2, r1, #2
 8004348:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800434c:	f7fb ff4e 	bl	80001ec <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4b0d      	ldr	r3, [pc, #52]	; (800438c <UART_SetConfig+0x4e4>)
 8004356:	fba3 1302 	umull	r1, r3, r3, r2
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	2164      	movs	r1, #100	; 0x64
 800435e:	fb01 f303 	mul.w	r3, r1, r3
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	3332      	adds	r3, #50	; 0x32
 8004368:	4a08      	ldr	r2, [pc, #32]	; (800438c <UART_SetConfig+0x4e4>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	f003 020f 	and.w	r2, r3, #15
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4422      	add	r2, r4
 800437c:	609a      	str	r2, [r3, #8]
}
 800437e:	bf00      	nop
 8004380:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004384:	46bd      	mov	sp, r7
 8004386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800438a:	bf00      	nop
 800438c:	51eb851f 	.word	0x51eb851f

08004390 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d123      	bne.n	80043ea <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80043aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	6851      	ldr	r1, [r2, #4]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	6892      	ldr	r2, [r2, #8]
 80043b6:	4311      	orrs	r1, r2
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	68d2      	ldr	r2, [r2, #12]
 80043bc:	4311      	orrs	r1, r2
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	6912      	ldr	r2, [r2, #16]
 80043c2:	4311      	orrs	r1, r2
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	6952      	ldr	r2, [r2, #20]
 80043c8:	4311      	orrs	r1, r2
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	6992      	ldr	r2, [r2, #24]
 80043ce:	4311      	orrs	r1, r2
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	69d2      	ldr	r2, [r2, #28]
 80043d4:	4311      	orrs	r1, r2
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	6a12      	ldr	r2, [r2, #32]
 80043da:	4311      	orrs	r1, r2
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043e0:	430a      	orrs	r2, r1
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e028      	b.n	800443c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	69d9      	ldr	r1, [r3, #28]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4319      	orrs	r1, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	430b      	orrs	r3, r1
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004410:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	6851      	ldr	r1, [r2, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	6892      	ldr	r2, [r2, #8]
 800441c:	4311      	orrs	r1, r2
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	68d2      	ldr	r2, [r2, #12]
 8004422:	4311      	orrs	r1, r2
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	6912      	ldr	r2, [r2, #16]
 8004428:	4311      	orrs	r1, r2
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	6952      	ldr	r2, [r2, #20]
 800442e:	4311      	orrs	r1, r2
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	6992      	ldr	r2, [r2, #24]
 8004434:	430a      	orrs	r2, r1
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d128      	bne.n	80044ae <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	1e59      	subs	r1, r3, #1
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	3b01      	subs	r3, #1
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	4319      	orrs	r1, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	3b01      	subs	r3, #1
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	4319      	orrs	r1, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	3b01      	subs	r3, #1
 8004484:	031b      	lsls	r3, r3, #12
 8004486:	4319      	orrs	r1, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	3b01      	subs	r3, #1
 800448e:	041b      	lsls	r3, r3, #16
 8004490:	4319      	orrs	r1, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	3b01      	subs	r3, #1
 8004498:	051b      	lsls	r3, r3, #20
 800449a:	4319      	orrs	r1, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	061b      	lsls	r3, r3, #24
 80044a4:	430b      	orrs	r3, r1
 80044a6:	431a      	orrs	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	e02f      	b.n	800450e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	68d2      	ldr	r2, [r2, #12]
 80044be:	3a01      	subs	r2, #1
 80044c0:	0311      	lsls	r1, r2, #12
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	6952      	ldr	r2, [r2, #20]
 80044c6:	3a01      	subs	r2, #1
 80044c8:	0512      	lsls	r2, r2, #20
 80044ca:	430a      	orrs	r2, r1
 80044cc:	431a      	orrs	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	1e59      	subs	r1, r3, #1
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	4319      	orrs	r1, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	4319      	orrs	r1, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	4319      	orrs	r1, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	3b01      	subs	r3, #1
 8004504:	061b      	lsls	r3, r3, #24
 8004506:	430b      	orrs	r3, r1
 8004508:	431a      	orrs	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	0d9b      	lsrs	r3, r3, #22
 8004532:	059b      	lsls	r3, r3, #22
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	6811      	ldr	r1, [r2, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	6852      	ldr	r2, [r2, #4]
 800453c:	4311      	orrs	r1, r2
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	6892      	ldr	r2, [r2, #8]
 8004542:	3a01      	subs	r2, #1
 8004544:	0152      	lsls	r2, r2, #5
 8004546:	4311      	orrs	r1, r2
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	68d2      	ldr	r2, [r2, #12]
 800454c:	0252      	lsls	r2, r2, #9
 800454e:	430a      	orrs	r2, r1
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8004556:	f7fc ff95 	bl	8001484 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800455c:	e010      	b.n	8004580 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d00c      	beq.n	8004580 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <FMC_SDRAM_SendCommand+0x60>
 800456c:	f7fc ff8a 	bl	8001484 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d201      	bcs.n	8004580 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e006      	b.n	800458e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b20      	cmp	r3, #32
 800458a:	d0e8      	beq.n	800455e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045a8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	0052      	lsls	r2, r2, #1
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <__libc_init_array>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4d0d      	ldr	r5, [pc, #52]	; (80045fc <__libc_init_array+0x38>)
 80045c8:	4c0d      	ldr	r4, [pc, #52]	; (8004600 <__libc_init_array+0x3c>)
 80045ca:	1b64      	subs	r4, r4, r5
 80045cc:	10a4      	asrs	r4, r4, #2
 80045ce:	2600      	movs	r6, #0
 80045d0:	42a6      	cmp	r6, r4
 80045d2:	d109      	bne.n	80045e8 <__libc_init_array+0x24>
 80045d4:	4d0b      	ldr	r5, [pc, #44]	; (8004604 <__libc_init_array+0x40>)
 80045d6:	4c0c      	ldr	r4, [pc, #48]	; (8004608 <__libc_init_array+0x44>)
 80045d8:	f000 f820 	bl	800461c <_init>
 80045dc:	1b64      	subs	r4, r4, r5
 80045de:	10a4      	asrs	r4, r4, #2
 80045e0:	2600      	movs	r6, #0
 80045e2:	42a6      	cmp	r6, r4
 80045e4:	d105      	bne.n	80045f2 <__libc_init_array+0x2e>
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ec:	4798      	blx	r3
 80045ee:	3601      	adds	r6, #1
 80045f0:	e7ee      	b.n	80045d0 <__libc_init_array+0xc>
 80045f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f6:	4798      	blx	r3
 80045f8:	3601      	adds	r6, #1
 80045fa:	e7f2      	b.n	80045e2 <__libc_init_array+0x1e>
 80045fc:	08004654 	.word	0x08004654
 8004600:	08004654 	.word	0x08004654
 8004604:	08004654 	.word	0x08004654
 8004608:	08004658 	.word	0x08004658

0800460c <memset>:
 800460c:	4402      	add	r2, r0
 800460e:	4603      	mov	r3, r0
 8004610:	4293      	cmp	r3, r2
 8004612:	d100      	bne.n	8004616 <memset+0xa>
 8004614:	4770      	bx	lr
 8004616:	f803 1b01 	strb.w	r1, [r3], #1
 800461a:	e7f9      	b.n	8004610 <memset+0x4>

0800461c <_init>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr

08004628 <_fini>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr
