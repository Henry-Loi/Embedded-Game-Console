#include "tetris.h"

#include "controller.h"
#include "delay.h"
#include "lcd.h"

#define u8	uint8_t
#define u16 uint16_t
u16 POINT_COLOR = 0x0000, BACK_COLOR = 0xFFFF;

/**********************************************************************************/
// Tetrisï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½ï¿½ï¿½Ð¶ï¿½
u8 game[32][24] = {
	/*   0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23*/
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********0**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********1**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********2**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********3**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********4**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********5**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********6**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********7**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********8**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********9**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********10**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********11**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********12**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********13**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********14**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********15**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********16**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********17**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********18**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********19**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********20**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********21**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********21**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********23**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********24**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********25**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********26**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********27**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********28**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********29**********//
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, //**********30**********//
	{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, //**********31**********//
};

/**********************************************************************************/
//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ±ï¿½ï¿½ï¿½
int TETRIS_KEY_RECEIVER = 0;
static int TETRIS_X_POSITION = 110;
static int TETRIS_Y_POSITION = 40;
static int RandomNumber = 2;
extern int Go_Down;
static int CreatNewBlock = 300;
static int YourLevel = 0;
static int YourScore = 0;
int previews[50] = {2, 8, 7, 9, 2, 3, 1, 2, 7, 4, 8, 7, 14, 8, 17, 8, 6, 18, 9, 8, 10, 5, 10};
int CountPreview = 1;
/***************************************
//ï¿½ï¿½ï¿½ï¿½Ï·ï¿½ß½ï¿½
***************************************/
void draw_game_window(void) {
	tft_fill_rect(0, 0, 10, 600, RED);
	tft_fill_rect(0, 0, 682, 10, RED);
	tft_fill_rect(682, 0, 692, 600, RED);
	tft_fill_rect(0, 590, 692, 600, RED);
}
/**************************************
//ï¿½ï¿½Ò»ï¿½ï¿½10X10ï¿½ï¿½ï¿½ØµÄ·ï¿½ï¿½ï¿½
*************************************/
#define BLOCK_LEN 40
void draw_block(u16 x, u16 y) {
	tft_fill_rect(x + 2, y + 2, x + BLOCK_LEN - 2, y + BLOCK_LEN - 2, GRAY);

	tft_fill_rect(x, y, x + BLOCK_LEN, y + 2, BLACK);
	tft_fill_rect(x, y, x + 2, y + BLOCK_LEN, BLACK);
	tft_fill_rect(x + 2, y + BLOCK_LEN - 2, x + BLOCK_LEN, y + BLOCK_LEN, BLACK);
	tft_fill_rect(x + BLOCK_LEN - 2, y + 2, x + BLOCK_LEN, y + BLOCK_LEN, BLACK);
}
/*****************************************
//É¾ï¿½ï¿½Ò»ï¿½ï¿½Ò»ï¿½ï¿½10X10ï¿½ï¿½ï¿½ØµÄ·ï¿½ï¿½ï¿½
*****************************************/
void delete_block(u16 x, u16 y) {
	u8 i, n;
	for (i = 0; i <= 9; i++) {
		for (n = 0; n <= 9; n++) {
			tft_draw_point((x + i), (y - n), WHITE);
		}
	}
}
/*************************************************
//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¼ï¿½ï¿?
*************************************************/
void draw_shape(u16 x, u16 y, u8 what) {
	switch (what) {
		case 1: {
			draw_block(x, y);
			draw_block(x + BLOCK_LEN, y);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x + BLOCK_LEN, y - BLOCK_LEN);
		} break;
		case 2: {
			draw_block(x, y);
			draw_block(x + BLOCK_LEN, y);
			draw_block(x + BLOCK_LEN * 2, y);
			draw_block(x + BLOCK_LEN * 3, y);
		} break;
		case 3: {
			draw_block(x, y);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x, y - BLOCK_LEN * 2);
			draw_block(x, y - BLOCK_LEN * 3);
		} break;
		case 4: {
			draw_block(x, y);
			draw_block(x + BLOCK_LEN, y - BLOCK_LEN);
			draw_block(x + BLOCK_LEN, y);
			draw_block(x + BLOCK_LEN * 2, y);
		} break;
		case 5: {
			draw_block(x, y);
			draw_block(x + BLOCK_LEN, y - BLOCK_LEN);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x, y - BLOCK_LEN * 2);
		} break;
		case 6: {
			draw_block(x, y);
			draw_block(x - BLOCK_LEN, y - BLOCK_LEN);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x, y - BLOCK_LEN * 2);
		} break;
		case 7: {
			draw_block(x - BLOCK_LEN, y - BLOCK_LEN);
			draw_block(x, y);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x + BLOCK_LEN, y - BLOCK_LEN);
		} break;
		case 8: {
			draw_block(x, y);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x, y - BLOCK_LEN * 2);
			draw_block(x + BLOCK_LEN, y);
		} break;
		case 9: {
			draw_block(x, y);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x + BLOCK_LEN, y - BLOCK_LEN);
			draw_block(x + BLOCK_LEN * 2, y - BLOCK_LEN);
		} break;
		case BLOCK_LEN: {
			draw_block(x, y);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x, y - BLOCK_LEN * 2);
			draw_block(x - BLOCK_LEN, y - BLOCK_LEN * 2);
		} break;
		case 11: {
			draw_block(x, y);
			draw_block(x + BLOCK_LEN, y);
			draw_block(x + BLOCK_LEN * 2, y);
			draw_block(x + BLOCK_LEN * 2, y - BLOCK_LEN);
		} break;
		case 12: {
			draw_block(x, y);
			draw_block(x + BLOCK_LEN, y);
			draw_block(x + BLOCK_LEN, y - BLOCK_LEN);
			draw_block(x + BLOCK_LEN, y - BLOCK_LEN * 2);
		} break;
		case 13: {
			draw_block(x, y);
			draw_block(x + BLOCK_LEN, y);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x, y - BLOCK_LEN * 2);
		} break;
		case 14: {
			draw_block(x, y);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x, y - BLOCK_LEN * 2);
			draw_block(x + BLOCK_LEN, y - BLOCK_LEN * 2);
		} break;
		case 15: {
			draw_block(x, y);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x + BLOCK_LEN, y);
			draw_block(x + BLOCK_LEN * 2, y);
		} break;
		case 16: {
			draw_block(x, y);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x + BLOCK_LEN, y - BLOCK_LEN);
			draw_block(x + BLOCK_LEN, y - BLOCK_LEN * 2);
		} break;
		case 17: {
			draw_block(x, y);
			draw_block(x + BLOCK_LEN, y);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x - BLOCK_LEN, y - BLOCK_LEN);
		} break;
		case 18: {
			draw_block(x, y);
			draw_block(x, y - BLOCK_LEN);
			draw_block(x - BLOCK_LEN, y - BLOCK_LEN);
			draw_block(x - BLOCK_LEN, y - BLOCK_LEN * 2);
		} break;
		case 19: {
			draw_block(x, y);
			draw_block(x + BLOCK_LEN, y);
			draw_block(x + BLOCK_LEN, y - BLOCK_LEN);
			draw_block(x + BLOCK_LEN * 2, y - BLOCK_LEN);
		} break;
	}
}
/*************************************************
//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¼ï¿½ï¿?
*************************************************/
void delete_shape(u16 x, u16 y, u8 what) {
	switch (what) {
		case 1: {
			delete_block(x, y);
			delete_block(x + BLOCK_LEN, y);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x + BLOCK_LEN, y - BLOCK_LEN);
		} break;
		case 2: {
			delete_block(x, y);
			delete_block(x + BLOCK_LEN, y);
			delete_block(x + BLOCK_LEN * 2, y);
			delete_block(x + BLOCK_LEN * 3, y);
		} break;
		case 3: {
			delete_block(x, y);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x, y - BLOCK_LEN * 2);
			delete_block(x, y - BLOCK_LEN * 3);
		} break;
		case 4: {
			delete_block(x, y);
			delete_block(x + BLOCK_LEN, y - BLOCK_LEN);
			delete_block(x + BLOCK_LEN, y);
			delete_block(x + BLOCK_LEN * 2, y);
		} break;
		case 5: {
			delete_block(x, y);
			delete_block(x + BLOCK_LEN, y - BLOCK_LEN);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x, y - BLOCK_LEN * 2);
		} break;
		case 6: {
			delete_block(x, y);
			delete_block(x - BLOCK_LEN, y - BLOCK_LEN);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x, y - BLOCK_LEN * 2);
		} break;
		case 7: {
			delete_block(x - BLOCK_LEN, y - BLOCK_LEN);
			delete_block(x, y);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x + BLOCK_LEN, y - BLOCK_LEN);
		} break;
		case 8: {
			delete_block(x, y);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x, y - BLOCK_LEN * 2);
			delete_block(x + BLOCK_LEN, y);
		} break;
		case 9: {
			delete_block(x, y);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x + BLOCK_LEN, y - BLOCK_LEN);
			delete_block(x + BLOCK_LEN * 2, y - BLOCK_LEN);
		} break;
		case BLOCK_LEN: {
			delete_block(x, y);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x, y - BLOCK_LEN * 2);
			delete_block(x - BLOCK_LEN, y - BLOCK_LEN * 2);
		} break;
		case 11: {
			delete_block(x, y);
			delete_block(x + BLOCK_LEN, y);
			delete_block(x + BLOCK_LEN * 2, y);
			delete_block(x + BLOCK_LEN * 2, y - BLOCK_LEN);
		} break;
		case 12: {
			delete_block(x, y);
			delete_block(x + BLOCK_LEN, y);
			delete_block(x + BLOCK_LEN, y - BLOCK_LEN);
			delete_block(x + BLOCK_LEN, y - BLOCK_LEN * 2);
		} break;
		case 13: {
			delete_block(x, y);
			delete_block(x + BLOCK_LEN, y);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x, y - BLOCK_LEN * 2);
		} break;
		case 14: {
			delete_block(x, y);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x, y - BLOCK_LEN * 2);
			delete_block(x + BLOCK_LEN, y - BLOCK_LEN * 2);
		} break;
		case 15: {
			delete_block(x, y);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x + BLOCK_LEN, y);
			delete_block(x + BLOCK_LEN * 2, y);
		} break;
		case 16: {
			delete_block(x, y);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x + BLOCK_LEN, y - BLOCK_LEN);
			delete_block(x + BLOCK_LEN, y - BLOCK_LEN * 2);
		} break;
		case 17: {
			delete_block(x, y);
			delete_block(x + BLOCK_LEN, y);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x - BLOCK_LEN, y - BLOCK_LEN);
		} break;
		case 18: {
			delete_block(x, y);
			delete_block(x, y - BLOCK_LEN);
			delete_block(x - BLOCK_LEN, y - BLOCK_LEN);
			delete_block(x - BLOCK_LEN, y - BLOCK_LEN * 2);
		} break;
		case 19: {
			delete_block(x, y);
			delete_block(x + BLOCK_LEN, y);
			delete_block(x + BLOCK_LEN, y - BLOCK_LEN);
			delete_block(x + BLOCK_LEN * 2, y - BLOCK_LEN);
		} break;
	}
}

void update_game_board(u16 x, u16 y) { game[y][x] = 1; }

void clear_game_board(u16 x, u16 y) { game[y][x] = 0; }

void DrawShapeState(u16 x, u16 y, u8 what) {
	switch (what) {
		case 1: {
			update_game_board(x, y);
			update_game_board(x + 1, y);
			update_game_board(x, y - 1);
			update_game_board(x + 1, y - 1);
		} break;
		case 2: {
			update_game_board(x, y);
			update_game_board(x + 1, y);
			update_game_board(x + 2, y);
			update_game_board(x + 3, y);
		} break;
		case 3: {
			update_game_board(x, y);
			update_game_board(x, y - 1);
			update_game_board(x, y - 2);
			update_game_board(x, y - 3);
		} break;
		case 4: {
			update_game_board(x, y);
			update_game_board(x + 1, y - 1);
			update_game_board(x + 1, y);
			update_game_board(x + 2, y);
		} break;
		case 5: {
			update_game_board(x, y);
			update_game_board(x + 1, y - 1);
			update_game_board(x, y - 1);
			update_game_board(x, y - 2);
		} break;
		case 6: {
			update_game_board(x, y);
			update_game_board(x - 1, y - 1);
			update_game_board(x, y - 1);
			update_game_board(x, y - 2);
		} break;
		case 7: {
			update_game_board(x - 1, y - 1);
			update_game_board(x, y);
			update_game_board(x, y - 1);
			update_game_board(x + 1, y - 1);
		} break;
		case 8: {
			update_game_board(x, y);
			update_game_board(x, y - 1);
			update_game_board(x, y - 2);
			update_game_board(x + 1, y);
		} break;
		case 9: {
			update_game_board(x, y);
			update_game_board(x, y - 1);
			update_game_board(x + 1, y - 1);
			update_game_board(x + 2, y - 1);
		} break;
		case 10: {
			update_game_board(x, y);
			update_game_board(x, y - 1);
			update_game_board(x, y - 2);
			update_game_board(x - 1, y - 2);
		} break;
		case 11: {
			update_game_board(x, y);
			update_game_board(x + 1, y);
			update_game_board(x + 2, y);
			update_game_board(x + 2, y - 1);
		} break;
		case 12: {
			update_game_board(x, y);
			update_game_board(x + 1, y);
			update_game_board(x + 1, y - 1);
			update_game_board(x + 1, y - 2);
		} break;
		case 13: {
			update_game_board(x, y);
			update_game_board(x + 1, y);
			update_game_board(x, y - 1);
			update_game_board(x, y - 2);
		} break;
		case 14: {
			update_game_board(x, y);
			update_game_board(x, y - 1);
			update_game_board(x, y - 2);
			update_game_board(x + 1, y - 2);
		} break;
		case 15: {
			update_game_board(x, y);
			update_game_board(x, y - 1);
			update_game_board(x + 1, y);
			update_game_board(x + 2, y);
		} break;
		case 16: {
			update_game_board(x, y);
			update_game_board(x, y - 1);
			update_game_board(x + 1, y - 1);
			update_game_board(x + 1, y - 2);
		} break;
		case 17: {
			update_game_board(x, y);
			update_game_board(x + 1, y);
			update_game_board(x, y - 1);
			update_game_board(x - 1, y - 1);
		} break;
		case 18: {
			update_game_board(x, y);
			update_game_board(x, y - 1);
			update_game_board(x - 1, y - 1);
			update_game_board(x - 1, y - 2);
		} break;
		case 19: {
			update_game_board(x, y);
			update_game_board(x + 1, y);
			update_game_board(x + 1, y - 1);
			update_game_board(x + 2, y - 1);
		} break;
	}
}
/*************************************************
É¾ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½Í¼ï¿½ï¿½×´Ì¬
*************************************************/
void DeleteShapeState(u16 x, u16 y, u8 what) {
	switch (what) {
		case 1: {
			clear_game_board(x, y);
			clear_game_board(x + 1, y);
			clear_game_board(x, y - 1);
			clear_game_board(x + 1, y - 1);
		} break;
		case 2: {
			clear_game_board(x, y);
			clear_game_board(x + 1, y);
			clear_game_board(x + 2, y);
			clear_game_board(x + 3, y);
		} break;
		case 3: {
			clear_game_board(x, y);
			clear_game_board(x, y - 1);
			clear_game_board(x, y - 2);
			clear_game_board(x, y - 3);
		} break;
		case 4: {
			clear_game_board(x, y);
			clear_game_board(x + 1, y - 1);
			clear_game_board(x + 1, y);
			clear_game_board(x + 2, y);
		} break;
		case 5: {
			clear_game_board(x, y);
			clear_game_board(x + 1, y - 1);
			clear_game_board(x, y - 1);
			clear_game_board(x, y - 2);
		} break;
		case 6: {
			clear_game_board(x, y);
			clear_game_board(x - 1, y - 1);
			clear_game_board(x, y - 1);
			clear_game_board(x, y - 2);
		} break;
		case 7: {
			clear_game_board(x, y);
			clear_game_board(x - 1, y - 1);
			clear_game_board(x, y - 1);
			clear_game_board(x + 1, y - 1);
		} break;
		case 8: {
			clear_game_board(x, y);
			clear_game_board(x, y - 1);
			clear_game_board(x, y - 2);
			clear_game_board(x + 1, y);
		} break;
		case 9: {
			clear_game_board(x, y);
			clear_game_board(x, y - 1);
			clear_game_board(x + 1, y - 1);
			clear_game_board(x + 2, y - 1);
		} break;
		case 10: {
			clear_game_board(x, y);
			clear_game_board(x, y - 1);
			clear_game_board(x, y - 2);
			clear_game_board(x - 1, y - 2);
		} break;
		case 11: {
			clear_game_board(x, y);
			clear_game_board(x + 1, y);
			clear_game_board(x + 2, y);
			clear_game_board(x + 2, y - 1);
		} break;
		case 12: {
			clear_game_board(x, y);
			clear_game_board(x + 1, y);
			clear_game_board(x + 1, y - 1);
			clear_game_board(x + 1, y - 2);
		} break;
		case 13: {
			clear_game_board(x, y);
			clear_game_board(x + 1, y);
			clear_game_board(x, y - 1);
			clear_game_board(x, y - 2);
		} break;
		case 14: {
			clear_game_board(x, y);
			clear_game_board(x, y - 1);
			clear_game_board(x, y - 2);
			clear_game_board(x + 1, y - 2);
		} break;
		case 15: {
			clear_game_board(x, y);
			clear_game_board(x, y - 1);
			clear_game_board(x + 1, y);
			clear_game_board(x + 2, y);
		} break;
		case 16: {
			clear_game_board(x, y);
			clear_game_board(x, y - 1);
			clear_game_board(x + 1, y - 1);
			clear_game_board(x + 1, y - 2);
		} break;
		case 17: {
			clear_game_board(x, y);
			clear_game_board(x + 1, y);
			clear_game_board(x, y - 1);
			clear_game_board(x - 1, y - 1);
		} break;
		case 18: {
			clear_game_board(x, y);
			clear_game_board(x, y - 1);
			clear_game_board(x - 1, y - 1);
			clear_game_board(x - 1, y - 2);
		} break;
		case 19: {
			clear_game_board(x, y);
			clear_game_board(x + 1, y);
			clear_game_board(x + 1, y - 1);
			clear_game_board(x + 2, y - 1);
		} break;
	}
}
/********************************************************
ï¿½ï¿½ï¿½ï¿½Ë¹ï¿½ï¿½ï¿½ï¿½ä»?ï¿½ï¿½ï¿½ï¿½
*********************************************************/
void TransFormer(u16 x, u16 y) {
	switch (RandomNumber) {
		case 1: break;
		case 2: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber++;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 3: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber--;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 4: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber++;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 5: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber += 2;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 6: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber -= 2;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 7: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber -= 1;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 8: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber += 1;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 9: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber += 1;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 10: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber += 1;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 11: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber -= 3;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 12: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber += 3;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 13: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber -= 1;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 14: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber -= 1;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 15: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber -= 1;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 16: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber += 1;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 17: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber -= 1;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 18: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber += 1;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
		case 19: {
			delete_shape(x, y, RandomNumber);
			DeleteShapeState(x, y, RandomNumber);
			RandomNumber -= 1;
			draw_shape(x, y, RandomNumber);
			DrawShapeState(x, y, RandomNumber);
		} break;
	}
}
/*************************************
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¼ï¿½ï¿½ï¿½Ë¶ï¿½
*************************************/
int read_controller() {
	if (ctrller.button[L_BTN_DOWN]) {
		return 10;
	}
	if (ctrller.button[L_BTN_LEFT]) {
		return 5;
	}
	if (ctrller.button[L_BTN_RIGHT]) {
		return 7;
	}
}
void Tetris_Game_Control(void) {
	//ï¿½Ð¶ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç·ñµ½´ï¿½ï¿½Ë£ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿?
	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½Ð£ï¿½ï¿½ï¿½ï¿½Â²ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Å£ï¿½ï¿½ï¿½Ê¹ï¿½Ã·ï¿½ï¿½ï¿½Óµï¿½Ò»ï¿½Ðµï¿½Ä³ï¿½ï¿½Î»ï¿½Ã³ï¿½ï¿½ï¿½

	// TETRIS_KEY_RECEIVER = Menu_Control_Read2(); //ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½Öµ
	TETRIS_KEY_RECEIVER = read_controller(); //ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½Öµ
	// 5: left
	// 7: right
	// 10: down
	switch (TETRIS_KEY_RECEIVER) //ï¿½ï¿½ï¿½Ý°ï¿½ï¿½ï¿½ÖµÆ¥ï¿½äº¯ï¿½ï¿½
	{
		case 2: {
			delay(200);
			TransFormer(TETRIS_X_POSITION, TETRIS_Y_POSITION);
			// Usart1_Send(BeCode[0],768);
		} break;
		case 10: //ï¿½ï¿½ï¿½ï¿½ï¿½Æ¶ï¿½Ò»ï¿½ï¿½ï¿½ï¿½Î»
		{
			delay(200);
			delete_shape(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);
			DeleteShapeState(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);
			TETRIS_Y_POSITION += 10;
			draw_shape(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);
			DrawShapeState(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);
			// Usart1_Send(BeCode[0],768);
		} break;
		case 5: //ï¿½ï¿½ï¿½ï¿½ï¿½Æ¶ï¿½Ò»ï¿½ï¿½ï¿½ï¿½Î»
		{
			delay(200);
			delete_shape(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);
			DeleteShapeState(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);
			switch (RandomNumber) {
				case 1:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 10) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 2:
					if (game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						TETRIS_X_POSITION -= 10;
					break;
				case 3:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 20) / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 30) / 10][(TETRIS_X_POSITION - 10) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 4:
					if (game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						TETRIS_X_POSITION -= 10;
					break;
				case 5:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 20) / 10][(TETRIS_X_POSITION - 10) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 6:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 20) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 7:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 20) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 8:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 20) / 10][(TETRIS_X_POSITION - 10) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 9:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 10) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 10:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 20) / 10][(TETRIS_X_POSITION - 20) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 11:
					if (game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						TETRIS_X_POSITION -= 10;
					break;
				case 12:
					if (game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						TETRIS_X_POSITION -= 10;
					break;
				case 13:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 30) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 14:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 20) / 10][(TETRIS_X_POSITION - 10) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 15:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 10) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 16:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 10) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 17:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 20) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 18:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION - 20) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 20) / 10][(TETRIS_X_POSITION - 20) / 10] != 1))
						TETRIS_X_POSITION -= 10;
					break;
				case 19:
					if (game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION - 10) / 10] != 1)
						TETRIS_X_POSITION -= 10;
					break;
			}
			draw_shape(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);
			DrawShapeState(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);
			// Usart1_Send(BeCode[0],768);
		} break;
		case 7: //ï¿½ï¿½ï¿½ï¿½ï¿½Æ¶ï¿½Ò»ï¿½ï¿½ï¿½ï¿½Î»
		{
			delay(200);
			delete_shape(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);
			DeleteShapeState(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);

			switch (RandomNumber) {
				case 1:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 20) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 20) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 2:
					if (game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 40) / 10] != 1)
						TETRIS_X_POSITION += 10;
					break;
				case 3:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 20) / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 30) / 10][(TETRIS_X_POSITION + 10) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 4:
					if (game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 30) / 10] != 1)
						TETRIS_X_POSITION += 10;
					break;
				case 5:
					if ((game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 20) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION) / 10][(TETRIS_X_POSITION + 10) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 6:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 20) / 10][(TETRIS_X_POSITION + 10) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 7:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 20) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 8:
					if (game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 20) / 10] != 1)
						TETRIS_X_POSITION += 10;
					break;
				case 9:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 30) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 10:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 20) / 10][(TETRIS_X_POSITION + 10) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 11:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 30) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 30) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 12:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 20) / 10][(TETRIS_X_POSITION + 10) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 13:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 10) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 14:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 20) / 10][(TETRIS_X_POSITION + 20) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 15:
					if (game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 30) / 10] != 1)
						TETRIS_X_POSITION += 10;
					break;
				case 16:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 20) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 20) / 10][(TETRIS_X_POSITION + 20) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 17:
					if (game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 20) / 10] != 1)
						TETRIS_X_POSITION += 10;
					break;
				case 18:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 10) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 10) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
				case 19:
					if ((game[TETRIS_Y_POSITION / 10][(TETRIS_X_POSITION + 20) / 10] != 1)
						|| (game[(TETRIS_Y_POSITION - 10) / 10][(TETRIS_X_POSITION + 30) / 10] != 1))
						TETRIS_X_POSITION += 10;
					break;
			}
			draw_shape(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);
			DrawShapeState(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);
			// Usart1_Send(BeCode[0],768);
		} break;
		case 16:
			NVIC_SystemReset();
			break;
			//		default :
			//		{
			//			delay(200);
			//			DeleteShape(TETRIS_X_POSITION,TETRIS_Y_POSITION,RandomNumber);
			//			DeleteShapeState(TETRIS_X_POSITION,TETRIS_Y_POSITION,RandomNumber);
			//			TETRIS_Y_POSITION += Go_Down;
			//			DrawShape(TETRIS_X_POSITION,TETRIS_Y_POSITION,RandomNumber);
			//			DrawShapeState(TETRIS_X_POSITION,TETRIS_Y_POSITION,RandomNumber);
			//			//Usart1_Send(BeCode[0],768);
			//		}break;
	}
}
/************************************
ï¿½ï¿½ï¿½Í¼ï¿½ï¿½Ö?ï¿½ï¿½ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½×²
************************************/
void Whether_Impact_Happened(u16 x, u16 y, u8 what) {
	switch (what) {
		case 1:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y + 10) / 10][(x + 10) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 2:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y + 10) / 10][(x + 10) / 10] == 1)
				|| (game[(y + 10) / 10][(x + 20) / 10] == 1) || (game[(y + 10) / 10][(x + 30) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 3:
			if (game[(y + 10) / 10][x / 10] == 1)
				CreatNewBlock = 500;
			break;
		case 4:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y + 10) / 10][(x + 10) / 10] == 1)
				|| (game[(y + 10) / 10][(x + 20) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 5:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y) / 10][(x + 10) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 6:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y) / 10][(x - 10) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 7:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y) / 10][(x - 10) / 10] == 1)
				|| (game[(y) / 10][(x + 10) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 8:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y + 10) / 10][(x + 10) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 9:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y) / 10][(x + 10) / 10] == 1)
				|| (game[(y) / 10][(x + 20) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 10:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y - 10) / 10][(x - 10) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 11:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y + 10) / 10][(x + 10) / 10] == 1)
				|| (game[(y + 10) / 10][(x + 20) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 12:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y + 10) / 10][(x + 10) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 13:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y) / 10][(x - 10) / 10] == 1)
				|| (game[(y) / 10][(x - 20) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 14:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y - 10) / 10][(x + 10) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 15:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y + 10) / 10][(x + 10) / 10] == 1)
				|| (game[(y + 10) / 10][(x + 20) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 16:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y) / 10][(x + 10) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 17:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y + 10) / 10][(x + 10) / 10] == 1)
				|| (game[(y) / 10][(x - 10) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 18:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y) / 10][(x - 10) / 10] == 1))
				CreatNewBlock = 500;
			break;
		case 19:
			if ((game[(y + 10) / 10][x / 10] == 1) || (game[(y + 10) / 10][(x + 10) / 10] == 1)
				|| (game[(y) / 10][(x + 10) / 10] == 1))
				CreatNewBlock = 500;
			break;
	}
}
/***************************************
ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½Ð±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½,ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
***************************************/
/***********************************
ï¿½ï¿½ï¿½Æºï¿½ï¿½ï¿½
***********************************************/
void Line_Move(u16 y) //ï¿½ï¿½ï¿½ï¿½ï¿½N+1ï¿½Ð¶ï¿½ï¿½ï¿½1
{
	u8 i;
	y = y / 10;
	for (i = 1; i < 23; i++) //ï¿½Æ¶ï¿½
	{
		//ï¿½ï¿½ï¿½ï¿½ifï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½Ðµï¿½Í¼ï¿½ï¿½ï¿½ï¿½×´Ì¬ï¿½ï¿½ï¿½æ»»
		if (game[y][i] == 1) {
			game[y][i] = game[y + 1][i];
			game[y + 1][i] = 1;
		}
		if (game[y][i] == 0) {
			game[y][i] = game[y + 1][i];
			game[y + 1][i] = 0;
		}
	}
}
/*
×ªï¿½ï¿½È«Îª1ï¿½Ðµï¿½×´Ì¬ï¿½ï¿½ï¿½ï¿½
Í¬Ê±É¾ï¿½ï¿½LCDï¿½ï¿½Ê¾ï¿½ï¿½ï¿½Ïµï¿½Ò»ï¿½ï¿½
*/
void Delete_Line(u16 y) {
	u8 i;
	y = y / 10;
	for (i = 1; i < 23; i++) {
		game[y][i] = 0;
		delete_block((i)*10, y * 10);
	}
}
/*****************************************
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
*****************************************/
void Earase(void) {
	u8 Refresh_Lcd_x, Refresh_Lcd_y;
	u8 n;
	for (n = 29; n > 0; n--) {
		if (n >= 29) {
			n = 29;
		}
		if ((game[n + 1][1] && game[n + 1][2] && game[n + 1][3] && game[n + 1][4] && game[n + 1][5] && game[n + 1][6]
			 && game[n + 1][7] && game[n + 1][8] && game[n + 1][9] && game[n + 1][10] && game[n + 1][11]
			 && game[n + 1][12] && game[n + 1][13] && game[n + 1][14] && game[n + 1][15] && game[n + 1][16]
			 && game[n + 1][17] && game[n + 1][18] && game[n + 1][19] && game[n + 1][20] && game[n + 1][21]
			 && game[n + 1][22])

			&& //ï¿½ï¿½ï¿½ï¿½ï¿½Nï¿½Ð²ï¿½ï¿½ï¿½1ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð£ï¿½ï¿½ï¿½N+1ï¿½ï¿½ï¿½Ç³ï¿½ï¿½ï¿½1ï¿½ï¿½ï¿½ï¿½
			!(game[n][1] && game[n][2] && game[n][3] && game[n][4] && game[n][5] && game[n][6] && game[n][7]
			  && game[n][8] && game[n][9] && game[n][10] && game[n][11] && game[n][12] && game[n][13] && game[n][14]
			  && game[n][15] && game[n][16] && game[n][17] && game[n][18] && game[n][19] && game[n][20] && game[n][21]
			  && game[n][22])) {
			Line_Move(10 * n); //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æºï¿½ï¿½ï¿½
			n = n + 2;
		}
		if (( //ï¿½ï¿½ï¿½ï¿½ï¿½Nï¿½Ð¶ï¿½Îª0
				!game[n][1] && !game[n][2] && !game[n][3] && !game[n][4] && !game[n][5] && !game[n][6] && !game[n][7]
				&& !game[n][8] && !game[n][9] && !game[n][10] && !game[n][11] && !game[n][12] && !game[n][13]
				&& !game[n][14] && !game[n][15] && !game[n][16] && !game[n][17] && !game[n][18] && !game[n][19]
				&& !game[n][20] && !game[n][21] && !game[n][22])) {
			for (n = 0; n < 31; n++) {
				if (( //ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½Ð¶ï¿½Î?1ï¿½ï¿½
						game[n][1] && game[n][2] && game[n][3] && game[n][4] && game[n][5] && game[n][6] && game[n][7]
						&& game[n][8] && game[n][9] && game[n][10] && game[n][11] && game[n][12] && game[n][13]
						&& game[n][14] && game[n][15] && game[n][16] && game[n][17] && game[n][18] && game[n][19]
						&& game[n][20] && game[n][21] && game[n][22])) {
					Delete_Line(n * 10); //ï¿½ï¿½×ªï¿½ï¿½ï¿½ï¿½Ðµï¿½×´Ì?ï¿½ï¿½Ê¹ï¿½ï¿½Îª0
					tft_fill_rect(10, 10, 230, 310, WHITE);
					delay(1);
					for (Refresh_Lcd_y = 1; Refresh_Lcd_y < 31; Refresh_Lcd_y++) {
						for (Refresh_Lcd_x = 1; Refresh_Lcd_x < 23; Refresh_Lcd_x++) {
							if (game[Refresh_Lcd_y][Refresh_Lcd_x] == 1) {
								draw_block(Refresh_Lcd_x * 10, Refresh_Lcd_y * 10);
							}
						}
					}
					YourScore++;
					if ((YourScore % 5) == 0) {
						YourLevel++;
					}
				}
			}
			break;
		}
	}
}
/***************************************
//ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È¼ï¿?
***************************************/
void DisplayScore(void) {
	tft_fill_rect(240, 0, 320, 5, BLUE);
	tft_fill_rect(320 - 5, 0, 320, 310, BLUE);
	tft_fill_rect(240, 155, 320, 160, BLUE);
	tft_fill_rect(240, 0, 245, 310, BLUE);
	tft_fill_rect(240, 310 - 5, 320, 310, BLUE);
	POINT_COLOR = BLUE;
	tft_prints(250, 170, 16, " LEVEL:", 1);
	// LCD_ShowNum_New(250, 200, RED, WHITE, 4, YourLevel, 16, 0);

	tft_prints(250, 230, 16, " SCORE:", 1);
	// LCD_ShowNum_New(250, 260, RED, WHITE, 4, YourScore, 16, 0);
	tft_prints(40, 330, 16, " KEY2:Change Shape", 1);
	tft_prints(40, 350, 16, " KEY0:Move Down", 1);
	tft_prints(40, 370, 16, " KEY5:Move Left", 1);
	tft_prints(40, 390, 16, " KEY7:Move Right", 1);
}
/***************************************
Ô¤ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Í¼ï¿½ï¿½
***************************************/
void PreviewNext(void) {
	POINT_COLOR = RED;
	tft_prints(250, 40, 16, " NEXT:", 1);
	if (CreatNewBlock == 300) {
		CreatNewBlock = 0;
		CountPreview = rand() % 20;
		if (CountPreview == 0)
			CountPreview = 2;
		draw_shape(265, 120, CountPreview);
	}
	if (CreatNewBlock > 400) {
		delete_shape(265, 120, CountPreview);
		CreatNewBlock = 0;
		TETRIS_Y_POSITION = 40;
		TETRIS_X_POSITION = 110;
		RandomNumber = CountPreview;
		CountPreview = rand() % 20;
		if (CountPreview == 0)
			CountPreview = 2;
		draw_shape(265, 120, CountPreview);
	}
}

/***************************************
ï¿½ï¿½Ï·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Úºï¿½ï¿½ï¿?
***************************************/
int i;
unsigned char count[1000];
void tetris_thread(void* par) {
	draw_game_window(); //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï·ï¿½Ä±ß½ï¿½ï¿½ï¿½
	while (1) {
		osDelay(4);
		PreviewNext();		   // Ô¤ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Í¼ï¿½ï¿½
		Tetris_Game_Control(); // TETRISï¿½Ä°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		Whether_Impact_Happened(TETRIS_X_POSITION, TETRIS_Y_POSITION, RandomNumber);
		// tft_prints(0, 0, "test");
		// tft_update();
		Earase();		//1¤71¤71¤71¤71¤71¤71¤71¤7
		DisplayScore(); //1¤71¤70¶51¤71¤71¤71¤71¤71¤70©71¤7
	}
	// //ï¿½Ð¶ï¿½ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×² Earase();
	// //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ DisplayScore(); //ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È¼ï¿?
}
